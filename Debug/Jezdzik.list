
Jezdzik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002100  08002100  00012100  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800217c  0800217c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000053c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000540  20000540  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fa57  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038a3  00000000  00000000  0003fa8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ca8  00000000  00000000  00043330  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012d0  00000000  00000000  00043fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000084c6  00000000  00000000  000452a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000049c2  00000000  00000000  0004d76e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00052130  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026b0  00000000  00000000  000521ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000b4d4  00000000  00000000  0005485c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020e8 	.word	0x080020e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080020e8 	.word	0x080020e8

080001c8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001c8:	4b2f      	ldr	r3, [pc, #188]	; (8000288 <MX_GPIO_Init+0xc0>)
{
 80001ca:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001cc:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 80001ce:	4d2f      	ldr	r5, [pc, #188]	; (800028c <MX_GPIO_Init+0xc4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001d0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80001d4:	615a      	str	r2, [r3, #20]
 80001d6:	695a      	ldr	r2, [r3, #20]
{
 80001d8:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80001de:	9201      	str	r2, [sp, #4]
 80001e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e2:	695a      	ldr	r2, [r3, #20]
 80001e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80001e8:	615a      	str	r2, [r3, #20]
 80001ea:	695a      	ldr	r2, [r3, #20]
 80001ec:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80001f0:	9202      	str	r2, [sp, #8]
 80001f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001f4:	695a      	ldr	r2, [r3, #20]
 80001f6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80001fa:	615a      	str	r2, [r3, #20]
 80001fc:	695a      	ldr	r2, [r3, #20]
 80001fe:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000202:	9203      	str	r2, [sp, #12]
 8000204:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000206:	695a      	ldr	r2, [r3, #20]
 8000208:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800020c:	615a      	str	r2, [r3, #20]
 800020e:	695a      	ldr	r2, [r3, #20]
 8000210:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000214:	9204      	str	r2, [sp, #16]
 8000216:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000218:	695a      	ldr	r2, [r3, #20]
 800021a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800021e:	615a      	str	r2, [r3, #20]
 8000220:	695a      	ldr	r2, [r3, #20]
 8000222:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000226:	9205      	str	r2, [sp, #20]
 8000228:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022a:	695a      	ldr	r2, [r3, #20]
 800022c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000238:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800023c:	4628      	mov	r0, r5
 800023e:	f64f 7108 	movw	r1, #65288	; 0xff08
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000244:	f000 fcca 	bl	8000bdc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8000248:	2337      	movs	r3, #55	; 0x37
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 800024c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800024e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <MX_GPIO_Init+0xc8>)
 8000252:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000254:	4628      	mov	r0, r5
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000256:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000258:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800025a:	f000 fbfd 	bl	8000a58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800025e:	f64f 7308 	movw	r3, #65288	; 0xff08
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000262:	a907      	add	r1, sp, #28
 8000264:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000266:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800026e:	f000 fbf3 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000272:	a907      	add	r1, sp, #28
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = B1_Pin;
 8000278:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800027e:	f000 fbeb 	bl	8000a58 <HAL_GPIO_Init>

}
 8000282:	b00c      	add	sp, #48	; 0x30
 8000284:	bd70      	pop	{r4, r5, r6, pc}
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000
 800028c:	48001000 	.word	0x48001000
 8000290:	10120000 	.word	0x10120000

08000294 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000294:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000296:	4815      	ldr	r0, [pc, #84]	; (80002ec <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x2000090E;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_I2C1_Init+0x5c>)
 800029a:	4916      	ldr	r1, [pc, #88]	; (80002f4 <MX_I2C1_Init+0x60>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029c:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x2000090E;
 800029e:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002aa:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ac:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ae:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002b2:	f000 fc9c 	bl	8000bee <HAL_I2C_Init>
 80002b6:	b118      	cbz	r0, 80002c0 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80002b8:	2142      	movs	r1, #66	; 0x42
 80002ba:	480f      	ldr	r0, [pc, #60]	; (80002f8 <MX_I2C1_Init+0x64>)
 80002bc:	f000 f8aa 	bl	8000414 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002c0:	2100      	movs	r1, #0
 80002c2:	480a      	ldr	r0, [pc, #40]	; (80002ec <MX_I2C1_Init+0x58>)
 80002c4:	f000 fce4 	bl	8000c90 <HAL_I2CEx_ConfigAnalogFilter>
 80002c8:	b118      	cbz	r0, 80002d2 <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80002ca:	2149      	movs	r1, #73	; 0x49
 80002cc:	480a      	ldr	r0, [pc, #40]	; (80002f8 <MX_I2C1_Init+0x64>)
 80002ce:	f000 f8a1 	bl	8000414 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002d2:	2100      	movs	r1, #0
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_I2C1_Init+0x58>)
 80002d6:	f000 fd01 	bl	8000cdc <HAL_I2CEx_ConfigDigitalFilter>
 80002da:	b128      	cbz	r0, 80002e8 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 80002dc:	2150      	movs	r1, #80	; 0x50
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <MX_I2C1_Init+0x64>)
  }

}
 80002e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80002e4:	f000 b896 	b.w	8000414 <_Error_Handler>
 80002e8:	bd08      	pop	{r3, pc}
 80002ea:	bf00      	nop
 80002ec:	20000024 	.word	0x20000024
 80002f0:	2000090e 	.word	0x2000090e
 80002f4:	40005400 	.word	0x40005400
 80002f8:	08002100 	.word	0x08002100

080002fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80002fe:	6802      	ldr	r2, [r0, #0]
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_I2C_MspInit+0x44>)
 8000302:	429a      	cmp	r2, r3
 8000304:	d118      	bne.n	8000338 <HAL_I2C_MspInit+0x3c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000306:	23c0      	movs	r3, #192	; 0xc0
 8000308:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800030a:	2312      	movs	r3, #18
 800030c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800030e:	2301      	movs	r3, #1
 8000310:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000312:	2303      	movs	r3, #3
 8000314:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000316:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	eb0d 0103 	add.w	r1, sp, r3
 800031c:	4809      	ldr	r0, [pc, #36]	; (8000344 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800031e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000320:	f000 fb9a 	bl	8000a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <HAL_I2C_MspInit+0x4c>)
 8000326:	69da      	ldr	r2, [r3, #28]
 8000328:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800032c:	61da      	str	r2, [r3, #28]
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000338:	b007      	add	sp, #28
 800033a:	f85d fb04 	ldr.w	pc, [sp], #4
 800033e:	bf00      	nop
 8000340:	40005400 	.word	0x40005400
 8000344:	48000400 	.word	0x48000400
 8000348:	40021000 	.word	0x40021000

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b510      	push	{r4, lr}
 800034e:	b09e      	sub	sp, #120	; 0x78
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000350:	2303      	movs	r3, #3
 8000352:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000354:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000358:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000362:	2310      	movs	r3, #16
 8000364:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000370:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000374:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f000 fd2a 	bl	8000dd0 <HAL_RCC_OscConfig>
 800037c:	b100      	cbz	r0, 8000380 <SystemClock_Config+0x34>
 800037e:	e7fe      	b.n	800037e <SystemClock_Config+0x32>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000388:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038c:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038e:	4621      	mov	r1, r4
 8000390:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000392:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000394:	f000 ffc0 	bl	8001318 <HAL_RCC_ClockConfig>
 8000398:	b100      	cbz	r0, 800039c <SystemClock_Config+0x50>
 800039a:	e7fe      	b.n	800039a <SystemClock_Config+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <SystemClock_Config+0x8c>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800039e:	9016      	str	r0, [sp, #88]	; 0x58
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003a0:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a2:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80003a4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a6:	f001 f87f 	bl	80014a8 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	4604      	mov	r4, r0
 80003ac:	b100      	cbz	r0, 80003b0 <SystemClock_Config+0x64>
 80003ae:	e7fe      	b.n	80003ae <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80003b0:	f001 f874 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80003b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80003bc:	f000 fb24 	bl	8000a08 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80003c0:	2004      	movs	r0, #4
 80003c2:	f000 fb37 	bl	8000a34 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80003c6:	4622      	mov	r2, r4
 80003c8:	4621      	mov	r1, r4
 80003ca:	f04f 30ff 	mov.w	r0, #4294967295
 80003ce:	f000 fadb 	bl	8000988 <HAL_NVIC_SetPriority>
}
 80003d2:	b01e      	add	sp, #120	; 0x78
 80003d4:	bd10      	pop	{r4, pc}
 80003d6:	bf00      	nop
 80003d8:	00020020 	.word	0x00020020

080003dc <main>:
{
 80003dc:	b508      	push	{r3, lr}
  HAL_Init();
 80003de:	f000 faa1 	bl	8000924 <HAL_Init>
  SystemClock_Config();
 80003e2:	f7ff ffb3 	bl	800034c <SystemClock_Config>
  MX_GPIO_Init();
 80003e6:	f7ff feef 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003ea:	f7ff ff53 	bl	8000294 <MX_I2C1_Init>
  MX_SPI1_Init();
 80003ee:	f000 f813 	bl	8000418 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80003f2:	f000 fa3f 	bl	8000874 <MX_USB_PCD_Init>
  MX_TIM16_Init();
 80003f6:	f000 f8f1 	bl	80005dc <MX_TIM16_Init>
  MX_TIM3_Init();
 80003fa:	f000 f983 	bl	8000704 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003fe:	f000 f9dd 	bl	80007bc <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <main+0x34>)
 8000404:	f001 f9ab 	bl	800175e <HAL_TIM_Base_Start_IT>
	  loop();
 8000408:	f001 fe1c 	bl	8002044 <loop>
 800040c:	e7fc      	b.n	8000408 <main+0x2c>
 800040e:	bf00      	nop
 8000410:	20000154 	.word	0x20000154

08000414 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000414:	e7fe      	b.n	8000414 <_Error_Handler>
	...

08000418 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8000418:	4811      	ldr	r0, [pc, #68]	; (8000460 <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041a:	4912      	ldr	r1, [pc, #72]	; (8000464 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800041c:	f44f 7240 	mov.w	r2, #768	; 0x300
{
 8000420:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000426:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000428:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800042c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000430:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000432:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000434:	2208      	movs	r2, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000436:	2107      	movs	r1, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000438:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800043a:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043c:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800043e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000440:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000442:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000446:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000448:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800044a:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800044c:	f001 f932 	bl	80016b4 <HAL_SPI_Init>
 8000450:	b128      	cbz	r0, 800045e <MX_SPI1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000452:	2147      	movs	r1, #71	; 0x47
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_SPI1_Init+0x50>)
  }

}
 8000456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800045a:	f7ff bfdb 	b.w	8000414 <_Error_Handler>
 800045e:	bd08      	pop	{r3, pc}
 8000460:	20000070 	.word	0x20000070
 8000464:	40013000 	.word	0x40013000
 8000468:	08002112 	.word	0x08002112

0800046c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800046c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 800046e:	6802      	ldr	r2, [r0, #0]
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_SPI_MspInit+0x44>)
 8000472:	429a      	cmp	r2, r3
 8000474:	d119      	bne.n	80004aa <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000476:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800047c:	699a      	ldr	r2, [r3, #24]
 800047e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000482:	619a      	str	r2, [r3, #24]
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800048e:	23e0      	movs	r3, #224	; 0xe0
 8000490:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000492:	2302      	movs	r3, #2
 8000494:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049a:	2303      	movs	r3, #3
 800049c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004a2:	2305      	movs	r3, #5
 80004a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f000 fad7 	bl	8000a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80004aa:	b007      	add	sp, #28
 80004ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80004b0:	40013000 	.word	0x40013000

080004b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b4:	4b21      	ldr	r3, [pc, #132]	; (800053c <HAL_MspInit+0x88>)
{
 80004b6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	f042 0201 	orr.w	r2, r2, #1
 80004be:	619a      	str	r2, [r3, #24]
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	f002 0201 	and.w	r2, r2, #1
 80004c6:	9200      	str	r2, [sp, #0]
 80004c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	69da      	ldr	r2, [r3, #28]
 80004cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004d0:	61da      	str	r2, [r3, #28]
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004da:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80004dc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004de:	f000 fa41 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	4611      	mov	r1, r2
 80004e6:	f06f 000b 	mvn.w	r0, #11
 80004ea:	f000 fa4d 	bl	8000988 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	4611      	mov	r1, r2
 80004f2:	f06f 000a 	mvn.w	r0, #10
 80004f6:	f000 fa47 	bl	8000988 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	4611      	mov	r1, r2
 80004fe:	f06f 0009 	mvn.w	r0, #9
 8000502:	f000 fa41 	bl	8000988 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	4611      	mov	r1, r2
 800050a:	f06f 0004 	mvn.w	r0, #4
 800050e:	f000 fa3b 	bl	8000988 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	4611      	mov	r1, r2
 8000516:	f06f 0003 	mvn.w	r0, #3
 800051a:	f000 fa35 	bl	8000988 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	4611      	mov	r1, r2
 8000522:	f06f 0001 	mvn.w	r0, #1
 8000526:	f000 fa2f 	bl	8000988 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	4611      	mov	r1, r2
 800052e:	f04f 30ff 	mov.w	r0, #4294967295
 8000532:	f000 fa29 	bl	8000988 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	b003      	add	sp, #12
 8000538:	f85d fb04 	ldr.w	pc, [sp], #4
 800053c:	40021000 	.word	0x40021000

08000540 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000542:	f000 fa01 	bl	8000948 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800054a:	f000 ba80 	b.w	8000a4e <HAL_SYSTICK_IRQHandler>
	...

08000550 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000550:	4801      	ldr	r0, [pc, #4]	; (8000558 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8000552:	f001 b914 	b.w	800177e <HAL_TIM_IRQHandler>
 8000556:	bf00      	nop
 8000558:	20000154 	.word	0x20000154

0800055c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800055c:	4801      	ldr	r0, [pc, #4]	; (8000564 <TIM3_IRQHandler+0x8>)
 800055e:	f001 b90e 	b.w	800177e <HAL_TIM_IRQHandler>
 8000562:	bf00      	nop
 8000564:	20000114 	.word	0x20000114

08000568 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000568:	4801      	ldr	r0, [pc, #4]	; (8000570 <TIM4_IRQHandler+0x8>)
 800056a:	f001 b908 	b.w	800177e <HAL_TIM_IRQHandler>
 800056e:	bf00      	nop
 8000570:	200000d4 	.word	0x200000d4

08000574 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <SystemInit+0x58>)
 8000576:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800057a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800057e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <SystemInit+0x5c>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	f042 0201 	orr.w	r2, r2, #1
 800058a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800058c:	6858      	ldr	r0, [r3, #4]
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <SystemInit+0x60>)
 8000590:	4002      	ands	r2, r0
 8000592:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800059a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800059e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005ae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80005b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b2:	f022 020f 	bic.w	r2, r2, #15
 80005b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80005b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <SystemInit+0x64>)
 80005bc:	4002      	ands	r2, r0
 80005be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005c8:	608b      	str	r3, [r1, #8]
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	40021000 	.word	0x40021000
 80005d4:	f87fc00c 	.word	0xf87fc00c
 80005d8:	ff00fccc 	.word	0xff00fccc

080005dc <MX_TIM16_Init>:
}
/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <MX_TIM16_Init+0x30>)
  htim16.Init.Prescaler = 71;
 80005de:	490c      	ldr	r1, [pc, #48]	; (8000610 <MX_TIM16_Init+0x34>)
{
 80005e0:	b508      	push	{r3, lr}
  htim16.Init.Prescaler = 71;
 80005e2:	2347      	movs	r3, #71	; 0x47
 80005e4:	e880 000a 	stmia.w	r0, {r1, r3}
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 999;
 80005e8:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	2300      	movs	r3, #0
 80005ee:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 999;
 80005f0:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80005f4:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005f8:	f001 f9d0 	bl	800199c <HAL_TIM_Base_Init>
 80005fc:	b128      	cbz	r0, 800060a <MX_TIM16_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80005fe:	21aa      	movs	r1, #170	; 0xaa
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_TIM16_Init+0x38>)
  }

}
 8000602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000606:	f7ff bf05 	b.w	8000414 <_Error_Handler>
 800060a:	bd08      	pop	{r3, pc}
 800060c:	20000154 	.word	0x20000154
 8000610:	40014400 	.word	0x40014400
 8000614:	08002134 	.word	0x08002134

08000618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000618:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM3)
 800061a:	6803      	ldr	r3, [r0, #0]
 800061c:	4a1f      	ldr	r2, [pc, #124]	; (800069c <HAL_TIM_Base_MspInit+0x84>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d114      	bne.n	800064c <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <HAL_TIM_Base_MspInit+0x88>)
 8000624:	69da      	ldr	r2, [r3, #28]
 8000626:	f042 0202 	orr.w	r2, r2, #2
 800062a:	61da      	str	r2, [r3, #28]
 800062c:	69db      	ldr	r3, [r3, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000636:	201d      	movs	r0, #29
 8000638:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800063a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800063c:	f000 f9a4 	bl	8000988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000640:	201d      	movs	r0, #29
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000642:	f000 f9d5 	bl	80009f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000646:	b005      	add	sp, #20
 8000648:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <HAL_TIM_Base_MspInit+0x8c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d110      	bne.n	8000674 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_TIM_Base_MspInit+0x88>)
 8000654:	69da      	ldr	r2, [r3, #28]
 8000656:	f042 0204 	orr.w	r2, r2, #4
 800065a:	61da      	str	r2, [r3, #28]
 800065c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000666:	201e      	movs	r0, #30
 8000668:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800066a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800066c:	f000 f98c 	bl	8000988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000670:	201e      	movs	r0, #30
 8000672:	e7e6      	b.n	8000642 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM16)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <HAL_TIM_Base_MspInit+0x90>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d1e5      	bne.n	8000646 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_TIM_Base_MspInit+0x88>)
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068c:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800068e:	2019      	movs	r0, #25
 8000690:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000692:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000694:	f000 f978 	bl	8000988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000698:	2019      	movs	r0, #25
 800069a:	e7d2      	b.n	8000642 <HAL_TIM_Base_MspInit+0x2a>
 800069c:	40000400 	.word	0x40000400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40000800 	.word	0x40000800
 80006a8:	40014400 	.word	0x40014400

080006ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80006ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM3)
 80006ae:	6803      	ldr	r3, [r0, #0]
 80006b0:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <HAL_TIM_MspPostInit+0x48>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d10f      	bne.n	80006d6 <HAL_TIM_MspPostInit+0x2a>
  /* USER CODE END TIM3_MspPostInit 0 */
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80006b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80006bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ca:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006cc:	f000 f9c4 	bl	8000a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80006d0:	b007      	add	sp, #28
 80006d2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM4)
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <HAL_TIM_MspPostInit+0x50>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d1f9      	bne.n	80006d0 <HAL_TIM_MspPostInit+0x24>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80006ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ee:	a901      	add	r1, sp, #4
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <HAL_TIM_MspPostInit+0x54>)
 80006f2:	e7eb      	b.n	80006cc <HAL_TIM_MspPostInit+0x20>
 80006f4:	40000400 	.word	0x40000400
 80006f8:	48000800 	.word	0x48000800
 80006fc:	40000800 	.word	0x40000800
 8000700:	48000c00 	.word	0x48000c00

08000704 <MX_TIM3_Init>:
{
 8000704:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8000706:	482a      	ldr	r0, [pc, #168]	; (80007b0 <MX_TIM3_Init+0xac>)
  htim3.Init.Prescaler = 71;
 8000708:	492a      	ldr	r1, [pc, #168]	; (80007b4 <MX_TIM3_Init+0xb0>)
 800070a:	2347      	movs	r3, #71	; 0x47
{
 800070c:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Prescaler = 71;
 800070e:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.Period = 999;
 8000712:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	2300      	movs	r3, #0
 8000718:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 800071a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000720:	f001 f93c 	bl	800199c <HAL_TIM_Base_Init>
 8000724:	b118      	cbz	r0, 800072e <MX_TIM3_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8000726:	2142      	movs	r1, #66	; 0x42
 8000728:	4823      	ldr	r0, [pc, #140]	; (80007b8 <MX_TIM3_Init+0xb4>)
 800072a:	f7ff fe73 	bl	8000414 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072e:	a90e      	add	r1, sp, #56	; 0x38
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000738:	481d      	ldr	r0, [pc, #116]	; (80007b0 <MX_TIM3_Init+0xac>)
 800073a:	f001 fa77 	bl	8001c2c <HAL_TIM_ConfigClockSource>
 800073e:	b118      	cbz	r0, 8000748 <MX_TIM3_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8000740:	2148      	movs	r1, #72	; 0x48
 8000742:	481d      	ldr	r0, [pc, #116]	; (80007b8 <MX_TIM3_Init+0xb4>)
 8000744:	f7ff fe66 	bl	8000414 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000748:	4819      	ldr	r0, [pc, #100]	; (80007b0 <MX_TIM3_Init+0xac>)
 800074a:	f001 f941 	bl	80019d0 <HAL_TIM_PWM_Init>
 800074e:	b118      	cbz	r0, 8000758 <MX_TIM3_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8000750:	214d      	movs	r1, #77	; 0x4d
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <MX_TIM3_Init+0xb4>)
 8000754:	f7ff fe5e 	bl	8000414 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800075a:	4669      	mov	r1, sp
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_TIM3_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000762:	f001 fc09 	bl	8001f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	b118      	cbz	r0, 8000770 <MX_TIM3_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8000768:	2154      	movs	r1, #84	; 0x54
 800076a:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_TIM3_Init+0xb4>)
 800076c:	f7ff fe52 	bl	8000414 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8000770:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000772:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000774:	a907      	add	r1, sp, #28
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MX_TIM3_Init+0xac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000778:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800077a:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077c:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	f001 fb72 	bl	8001e68 <HAL_TIM_PWM_ConfigChannel>
 8000784:	b118      	cbz	r0, 800078e <MX_TIM3_Init+0x8a>
    _Error_Handler(__FILE__, __LINE__);
 8000786:	215d      	movs	r1, #93	; 0x5d
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <MX_TIM3_Init+0xb4>)
 800078a:	f7ff fe43 	bl	8000414 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800078e:	2208      	movs	r2, #8
 8000790:	a907      	add	r1, sp, #28
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <MX_TIM3_Init+0xac>)
 8000794:	f001 fb68 	bl	8001e68 <HAL_TIM_PWM_ConfigChannel>
 8000798:	b118      	cbz	r0, 80007a2 <MX_TIM3_Init+0x9e>
    _Error_Handler(__FILE__, __LINE__);
 800079a:	2162      	movs	r1, #98	; 0x62
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_TIM3_Init+0xb4>)
 800079e:	f7ff fe39 	bl	8000414 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <MX_TIM3_Init+0xac>)
 80007a4:	f7ff ff82 	bl	80006ac <HAL_TIM_MspPostInit>
}
 80007a8:	b00f      	add	sp, #60	; 0x3c
 80007aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80007ae:	bf00      	nop
 80007b0:	20000114 	.word	0x20000114
 80007b4:	40000400 	.word	0x40000400
 80007b8:	08002134 	.word	0x08002134

080007bc <MX_TIM4_Init>:
{
 80007bc:	b500      	push	{lr}
  htim4.Instance = TIM4;
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <MX_TIM4_Init+0xac>)
  htim4.Init.Prescaler = 71;
 80007c0:	492a      	ldr	r1, [pc, #168]	; (800086c <MX_TIM4_Init+0xb0>)
 80007c2:	2347      	movs	r3, #71	; 0x47
{
 80007c4:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 71;
 80007c6:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.Period = 999;
 80007ca:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	2300      	movs	r3, #0
 80007d0:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 999;
 80007d2:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007d8:	f001 f8e0 	bl	800199c <HAL_TIM_Base_Init>
 80007dc:	b118      	cbz	r0, 80007e6 <MX_TIM4_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 80007de:	2177      	movs	r1, #119	; 0x77
 80007e0:	4823      	ldr	r0, [pc, #140]	; (8000870 <MX_TIM4_Init+0xb4>)
 80007e2:	f7ff fe17 	bl	8000414 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	a90e      	add	r1, sp, #56	; 0x38
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007f0:	481d      	ldr	r0, [pc, #116]	; (8000868 <MX_TIM4_Init+0xac>)
 80007f2:	f001 fa1b 	bl	8001c2c <HAL_TIM_ConfigClockSource>
 80007f6:	b118      	cbz	r0, 8000800 <MX_TIM4_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 80007f8:	217d      	movs	r1, #125	; 0x7d
 80007fa:	481d      	ldr	r0, [pc, #116]	; (8000870 <MX_TIM4_Init+0xb4>)
 80007fc:	f7ff fe0a 	bl	8000414 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000800:	4819      	ldr	r0, [pc, #100]	; (8000868 <MX_TIM4_Init+0xac>)
 8000802:	f001 f8e5 	bl	80019d0 <HAL_TIM_PWM_Init>
 8000806:	b118      	cbz	r0, 8000810 <MX_TIM4_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8000808:	2182      	movs	r1, #130	; 0x82
 800080a:	4819      	ldr	r0, [pc, #100]	; (8000870 <MX_TIM4_Init+0xb4>)
 800080c:	f7ff fe02 	bl	8000414 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000812:	4669      	mov	r1, sp
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <MX_TIM4_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800081a:	f001 fbad 	bl	8001f78 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	b118      	cbz	r0, 8000828 <MX_TIM4_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8000820:	2189      	movs	r1, #137	; 0x89
 8000822:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_TIM4_Init+0xb4>)
 8000824:	f7ff fdf6 	bl	8000414 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8000828:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082c:	a907      	add	r1, sp, #28
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_TIM4_Init+0xac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8000832:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000834:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000836:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000838:	f001 fb16 	bl	8001e68 <HAL_TIM_PWM_ConfigChannel>
 800083c:	b118      	cbz	r0, 8000846 <MX_TIM4_Init+0x8a>
    _Error_Handler(__FILE__, __LINE__);
 800083e:	2192      	movs	r1, #146	; 0x92
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <MX_TIM4_Init+0xb4>)
 8000842:	f7ff fde7 	bl	8000414 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000846:	2204      	movs	r2, #4
 8000848:	a907      	add	r1, sp, #28
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <MX_TIM4_Init+0xac>)
 800084c:	f001 fb0c 	bl	8001e68 <HAL_TIM_PWM_ConfigChannel>
 8000850:	b118      	cbz	r0, 800085a <MX_TIM4_Init+0x9e>
    _Error_Handler(__FILE__, __LINE__);
 8000852:	2197      	movs	r1, #151	; 0x97
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_TIM4_Init+0xb4>)
 8000856:	f7ff fddd 	bl	8000414 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <MX_TIM4_Init+0xac>)
 800085c:	f7ff ff26 	bl	80006ac <HAL_TIM_MspPostInit>
}
 8000860:	b00f      	add	sp, #60	; 0x3c
 8000862:	f85d fb04 	ldr.w	pc, [sp], #4
 8000866:	bf00      	nop
 8000868:	200000d4 	.word	0x200000d4
 800086c:	40000800 	.word	0x40000800
 8000870:	08002134 	.word	0x08002134

08000874 <MX_USB_PCD_Init>:
/* USB init function */

void MX_USB_PCD_Init(void)
{

  hpcd_USB_FS.Instance = USB;
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_USB_PCD_Init+0x30>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000876:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <MX_USB_PCD_Init+0x34>)
{
 8000878:	b508      	push	{r3, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800087a:	2308      	movs	r3, #8
 800087c:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8000880:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000882:	2202      	movs	r2, #2
 8000884:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8000886:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000888:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800088a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800088c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800088e:	f000 fa4a 	bl	8000d26 <HAL_PCD_Init>
 8000892:	b128      	cbz	r0, 80008a0 <MX_USB_PCD_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000894:	2141      	movs	r1, #65	; 0x41
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USB_PCD_Init+0x38>)
  }

}
 8000898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800089c:	f7ff bdba 	b.w	8000414 <_Error_Handler>
 80008a0:	bd08      	pop	{r3, pc}
 80008a2:	bf00      	nop
 80008a4:	20000194 	.word	0x20000194
 80008a8:	40005c00 	.word	0x40005c00
 80008ac:	08002146 	.word	0x08002146

080008b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80008b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 80008b2:	6802      	ldr	r2, [r0, #0]
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_PCD_MspInit+0x44>)
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d119      	bne.n	80008ee <HAL_PCD_MspInit+0x3e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80008ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008ce:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f000 f8bf 	bl	8000a58 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_PCD_MspInit+0x48>)
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008e2:	61da      	str	r2, [r3, #28]
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80008ee:	b007      	add	sp, #28
 80008f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f4:	40005c00 	.word	0x40005c00
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_InitTick+0x24>)
{
 8000900:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000908:	fbb0 f0f3 	udiv	r0, r0, r3
 800090c:	f000 f87c 	bl	8000a08 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000910:	2200      	movs	r2, #0
 8000912:	4621      	mov	r1, r4
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f000 f836 	bl	8000988 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800091c:	2000      	movs	r0, #0
 800091e:	bd10      	pop	{r4, pc}
 8000920:	20000000 	.word	0x20000000

08000924 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_Init+0x20>)
{
 8000926:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f817 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ffe0 	bl	80008fc <HAL_InitTick>
  HAL_MspInit();
 800093c:	f7ff fdba 	bl	80004b4 <HAL_MspInit>
}
 8000940:	2000      	movs	r0, #0
 8000942:	bd08      	pop	{r3, pc}
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000948:	4a02      	ldr	r2, [pc, #8]	; (8000954 <HAL_IncTick+0xc>)
 800094a:	6813      	ldr	r3, [r2, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000053c 	.word	0x2000053c

08000958 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000958:	4b01      	ldr	r3, [pc, #4]	; (8000960 <HAL_GetTick+0x8>)
 800095a:	6818      	ldr	r0, [r3, #0]
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	2000053c 	.word	0x2000053c

08000964 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000966:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000968:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800096c:	041b      	lsls	r3, r3, #16
 800096e:	0c1b      	lsrs	r3, r3, #16
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000974:	0200      	lsls	r0, r0, #8
 8000976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800097e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000980:	60d3      	str	r3, [r2, #12]
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098a:	b530      	push	{r4, r5, lr}
 800098c:	68dc      	ldr	r4, [r3, #12]
 800098e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000992:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	2b04      	cmp	r3, #4
 800099a:	bf28      	it	cs
 800099c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	f04f 0501 	mov.w	r5, #1
 80009a4:	fa05 f303 	lsl.w	r3, r5, r3
 80009a8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ac:	bf8c      	ite	hi
 80009ae:	3c03      	subhi	r4, #3
 80009b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b2:	4019      	ands	r1, r3
 80009b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b6:	fa05 f404 	lsl.w	r4, r5, r4
 80009ba:	3c01      	subs	r4, #1
 80009bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80009be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	ea42 0201 	orr.w	r2, r2, r1
 80009c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	bfaf      	iteee	ge
 80009ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	f000 000f 	andlt.w	r0, r0, #15
 80009d2:	4b06      	ldrlt	r3, [pc, #24]	; (80009ec <HAL_NVIC_SetPriority+0x64>)
 80009d4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	bfa5      	ittet	ge
 80009d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009e4:	bd30      	pop	{r4, r5, pc}
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	e000ed14 	.word	0xe000ed14

080009f0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009f0:	0942      	lsrs	r2, r0, #5
 80009f2:	2301      	movs	r3, #1
 80009f4:	f000 001f 	and.w	r0, r0, #31
 80009f8:	fa03 f000 	lsl.w	r0, r3, r0
 80009fc:	4b01      	ldr	r3, [pc, #4]	; (8000a04 <HAL_NVIC_EnableIRQ+0x14>)
 80009fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	3801      	subs	r0, #1
 8000a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a0e:	d20a      	bcs.n	8000a26 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a14:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	21f0      	movs	r1, #240	; 0xf0
 8000a18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a36:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a38:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a3a:	bf0c      	ite	eq
 8000a3c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a40:	f022 0204 	bicne.w	r2, r2, #4
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	4770      	bx	lr
 8000a48:	e000e010 	.word	0xe000e010

08000a4c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a4c:	4770      	bx	lr

08000a4e <HAL_SYSTICK_IRQHandler>:
{
 8000a4e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a50:	f7ff fffc 	bl	8000a4c <HAL_SYSTICK_Callback>
 8000a54:	bd08      	pop	{r3, pc}
	...

08000a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a5c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000bd8 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a64:	4a5a      	ldr	r2, [pc, #360]	; (8000bd0 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8000a66:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a68:	fa38 f403 	lsrs.w	r4, r8, r3
 8000a6c:	d102      	bne.n	8000a74 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000a6e:	b003      	add	sp, #12
 8000a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a74:	2401      	movs	r4, #1
 8000a76:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000a7a:	ea18 050a 	ands.w	r5, r8, sl
 8000a7e:	f000 809c 	beq.w	8000bba <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a82:	684c      	ldr	r4, [r1, #4]
 8000a84:	f024 0b10 	bic.w	fp, r4, #16
 8000a88:	f1bb 0f02 	cmp.w	fp, #2
 8000a8c:	d114      	bne.n	8000ab8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000a8e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000a92:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a96:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000a9a:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a9e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000aa2:	270f      	movs	r7, #15
 8000aa4:	fa07 f70c 	lsl.w	r7, r7, ip
 8000aa8:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aac:	690e      	ldr	r6, [r1, #16]
 8000aae:	fa06 f60c 	lsl.w	r6, r6, ip
 8000ab2:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000ab4:	f8ce 6020 	str.w	r6, [lr, #32]
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000abc:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000abe:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ac0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ac4:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aca:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000acc:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad4:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad8:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000adc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ade:	d811      	bhi.n	8000b04 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000ae0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae2:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ae6:	68ce      	ldr	r6, [r1, #12]
 8000ae8:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000aec:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000af0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000af2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000af4:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000af8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000afc:	409e      	lsls	r6, r3
 8000afe:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000b02:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b04:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b06:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b08:	688e      	ldr	r6, [r1, #8]
 8000b0a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000b0e:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b10:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000b12:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b14:	d551      	bpl.n	8000bba <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000b1a:	f046 0601 	orr.w	r6, r6, #1
 8000b1e:	f8c9 6018 	str.w	r6, [r9, #24]
 8000b22:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000b26:	f023 0703 	bic.w	r7, r3, #3
 8000b2a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b2e:	f006 0601 	and.w	r6, r6, #1
 8000b32:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000b36:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b38:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b3e:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b40:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b44:	f04f 0e0f 	mov.w	lr, #15
 8000b48:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b4c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b50:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b54:	d033      	beq.n	8000bbe <HAL_GPIO_Init+0x166>
 8000b56:	4e1f      	ldr	r6, [pc, #124]	; (8000bd4 <HAL_GPIO_Init+0x17c>)
 8000b58:	42b0      	cmp	r0, r6
 8000b5a:	d032      	beq.n	8000bc2 <HAL_GPIO_Init+0x16a>
 8000b5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b60:	42b0      	cmp	r0, r6
 8000b62:	d030      	beq.n	8000bc6 <HAL_GPIO_Init+0x16e>
 8000b64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b68:	42b0      	cmp	r0, r6
 8000b6a:	d02e      	beq.n	8000bca <HAL_GPIO_Init+0x172>
 8000b6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b70:	42b0      	cmp	r0, r6
 8000b72:	bf14      	ite	ne
 8000b74:	2605      	movne	r6, #5
 8000b76:	2604      	moveq	r6, #4
 8000b78:	fa06 f60c 	lsl.w	r6, r6, ip
 8000b7c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b80:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000b82:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b84:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b86:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b8a:	bf0c      	ite	eq
 8000b8c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b8e:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000b90:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000b92:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b98:	bf0c      	ite	eq
 8000b9a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b9c:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000b9e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000ba0:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ba6:	bf0c      	ite	eq
 8000ba8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000baa:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000bac:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000bae:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bb2:	bf54      	ite	pl
 8000bb4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000bb6:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000bb8:	60d6      	str	r6, [r2, #12]
    position++;
 8000bba:	3301      	adds	r3, #1
 8000bbc:	e754      	b.n	8000a68 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bbe:	2600      	movs	r6, #0
 8000bc0:	e7da      	b.n	8000b78 <HAL_GPIO_Init+0x120>
 8000bc2:	2601      	movs	r6, #1
 8000bc4:	e7d8      	b.n	8000b78 <HAL_GPIO_Init+0x120>
 8000bc6:	2602      	movs	r6, #2
 8000bc8:	e7d6      	b.n	8000b78 <HAL_GPIO_Init+0x120>
 8000bca:	2603      	movs	r6, #3
 8000bcc:	e7d4      	b.n	8000b78 <HAL_GPIO_Init+0x120>
 8000bce:	bf00      	nop
 8000bd0:	40010400 	.word	0x40010400
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bdc:	b10a      	cbz	r2, 8000be2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bde:	6181      	str	r1, [r0, #24]
 8000be0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000be2:	6281      	str	r1, [r0, #40]	; 0x28
 8000be4:	4770      	bx	lr

08000be6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000be6:	6943      	ldr	r3, [r0, #20]
 8000be8:	4059      	eors	r1, r3
 8000bea:	6141      	str	r1, [r0, #20]
 8000bec:	4770      	bx	lr

08000bee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bee:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d04a      	beq.n	8000c8c <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bf6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000bfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bfe:	b91b      	cbnz	r3, 8000c08 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c00:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c04:	f7ff fb7a 	bl	80002fc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c08:	2324      	movs	r3, #36	; 0x24
 8000c0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c0e:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c10:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f022 0201 	bic.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c1a:	6862      	ldr	r2, [r4, #4]
 8000c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c20:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c22:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c24:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c2e:	d124      	bne.n	8000c7a <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c34:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c36:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c38:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c3a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c4c:	6922      	ldr	r2, [r4, #16]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	69a1      	ldr	r1, [r4, #24]
 8000c52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c58:	6a21      	ldr	r1, [r4, #32]
 8000c5a:	69e2      	ldr	r2, [r4, #28]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f042 0201 	orr.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c68:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c6a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c6c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c72:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000c78:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c7e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c80:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c82:	bf04      	itt	eq
 8000c84:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000c88:	605a      	streq	r2, [r3, #4]
 8000c8a:	e7d4      	b.n	8000c36 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000c8c:	2001      	movs	r0, #1
}
 8000c8e:	bd10      	pop	{r4, pc}

08000c90 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c90:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	2a20      	cmp	r2, #32
{
 8000c98:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c9a:	d11d      	bne.n	8000cd8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d019      	beq.n	8000cd8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ca4:	2324      	movs	r3, #36	; 0x24
 8000ca6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000caa:	6803      	ldr	r3, [r0, #0]
 8000cac:	681c      	ldr	r4, [r3, #0]
 8000cae:	f024 0401 	bic.w	r4, r4, #1
 8000cb2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cb4:	681c      	ldr	r4, [r3, #0]
 8000cb6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000cba:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cbc:	681c      	ldr	r4, [r3, #0]
 8000cbe:	4321      	orrs	r1, r4
 8000cc0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cc2:	6819      	ldr	r1, [r3, #0]
 8000cc4:	f041 0101 	orr.w	r1, r1, #1
 8000cc8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ccc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000cd0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000cd8:	2002      	movs	r0, #2
  }
}
 8000cda:	bd10      	pop	{r4, pc}

08000cdc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000cdc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cde:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000ce2:	b2e4      	uxtb	r4, r4
 8000ce4:	2c20      	cmp	r4, #32
 8000ce6:	d11c      	bne.n	8000d22 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ce8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d018      	beq.n	8000d22 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf0:	2324      	movs	r3, #36	; 0x24
 8000cf2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cf6:	6803      	ldr	r3, [r0, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d00:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d02:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d06:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d0a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	f042 0201 	orr.w	r2, r2, #1
 8000d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d14:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d16:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d1a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000d22:	2002      	movs	r0, #2
  }
}
 8000d24:	bd10      	pop	{r4, pc}

08000d26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000d26:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000d28:	4604      	mov	r4, r0
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d04d      	beq.n	8000dca <HAL_PCD_Init+0xa4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000d2e:	f890 3371 	ldrb.w	r3, [r0, #881]	; 0x371
 8000d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d36:	b91b      	cbnz	r3, 8000d40 <HAL_PCD_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d38:	f880 2370 	strb.w	r2, [r0, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d3c:	f7ff fdb8 	bl	80008b0 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d40:	2303      	movs	r3, #3
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000d42:	2100      	movs	r1, #0
 8000d44:	6860      	ldr	r0, [r4, #4]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d46:	f884 3371 	strb.w	r3, [r4, #881]	; 0x371
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000d50:	2501      	movs	r5, #1
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000d52:	4281      	cmp	r1, r0
 8000d54:	f103 031c 	add.w	r3, r3, #28
 8000d58:	d11b      	bne.n	8000d92 <HAL_PCD_Init+0x6c>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f504 72e6 	add.w	r2, r4, #460	; 0x1cc
 8000d60:	4603      	mov	r3, r0
   hpcd->IN_ep[i].maxpacket =  0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000d62:	4281      	cmp	r1, r0
 8000d64:	f102 021c 	add.w	r2, r2, #28
 8000d68:	d121      	bne.n	8000dae <HAL_PCD_Init+0x88>
   hpcd->OUT_ep[i].xfer_len = 0U;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000d6a:	6822      	ldr	r2, [r4, #0]
 8000d6c:	2101      	movs	r1, #1
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000d6e:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000d72:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
 hpcd->Instance->CNTR = 0U;
 8000d76:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 hpcd->Instance->ISTR = 0U;
 8000d7a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000d7e:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000d82:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 8000d86:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;

 return HAL_OK;
 8000d8a:	2000      	movs	r0, #0
  hpcd->State= HAL_PCD_STATE_READY;
 8000d8c:	f884 1371 	strb.w	r1, [r4, #881]	; 0x371
 return HAL_OK;
 8000d90:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 8000d92:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].is_in = 1U;
 8000d96:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000d9a:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000d9e:	f843 2c10 	str.w	r2, [r3, #-16]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000da2:	f843 2c0c 	str.w	r2, [r3, #-12]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000da6:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000daa:	3101      	adds	r1, #1
 8000dac:	e7d1      	b.n	8000d52 <HAL_PCD_Init+0x2c>
   hpcd->OUT_ep[i].num = i;
 8000dae:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].is_in = 0U;
 8000db2:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000db6:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000dba:	f842 3c10 	str.w	r3, [r2, #-16]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dbe:	f842 3c0c 	str.w	r3, [r2, #-12]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000dc2:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000dc6:	3001      	adds	r0, #1
 8000dc8:	e7cb      	b.n	8000d62 <HAL_PCD_Init+0x3c>
    return HAL_ERROR;
 8000dca:	2001      	movs	r0, #1
}
 8000dcc:	bd38      	pop	{r3, r4, r5, pc}
	...

08000dd0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd0:	6803      	ldr	r3, [r0, #0]
 8000dd2:	07da      	lsls	r2, r3, #31
{
 8000dd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dda:	d411      	bmi.n	8000e00 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	079b      	lsls	r3, r3, #30
 8000de0:	f100 8088 	bmi.w	8000ef4 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	071c      	lsls	r4, r3, #28
 8000de8:	f100 80f8 	bmi.w	8000fdc <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	0758      	lsls	r0, r3, #29
 8000df0:	f100 8141 	bmi.w	8001076 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df4:	69ea      	ldr	r2, [r5, #28]
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 81d7 	bne.w	80011aa <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e021      	b.n	8000e44 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e00:	4cba      	ldr	r4, [pc, #744]	; (80010ec <HAL_RCC_OscConfig+0x31c>)
 8000e02:	6863      	ldr	r3, [r4, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d007      	beq.n	8000e1c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0c:	6863      	ldr	r3, [r4, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d119      	bne.n	8000e4a <HAL_RCC_OscConfig+0x7a>
 8000e16:	6863      	ldr	r3, [r4, #4]
 8000e18:	03df      	lsls	r7, r3, #15
 8000e1a:	d516      	bpl.n	8000e4a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	6821      	ldr	r1, [r4, #0]
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2201      	movs	r2, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	420b      	tst	r3, r1
 8000e3a:	d0cf      	beq.n	8000ddc <HAL_RCC_OscConfig+0xc>
 8000e3c:	686b      	ldr	r3, [r5, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1cc      	bne.n	8000ddc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e42:	2001      	movs	r0, #1
}
 8000e44:	b002      	add	sp, #8
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4a:	686a      	ldr	r2, [r5, #4]
 8000e4c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000e50:	d125      	bne.n	8000e9e <HAL_RCC_OscConfig+0xce>
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e58:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e5c:	68a9      	ldr	r1, [r5, #8]
 8000e5e:	f023 030f 	bic.w	r3, r3, #15
 8000e62:	430b      	orrs	r3, r1
 8000e64:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e66:	b352      	cbz	r2, 8000ebe <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000e68:	f7ff fd76 	bl	8000958 <HAL_GetTick>
 8000e6c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e70:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	2701      	movs	r7, #1
 8000e74:	fa96 f3a6 	rbit	r3, r6
 8000e78:	6822      	ldr	r2, [r4, #0]
 8000e7a:	fa96 f3a6 	rbit	r3, r6
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	fa07 f303 	lsl.w	r3, r7, r3
 8000e8a:	4213      	tst	r3, r2
 8000e8c:	d1a6      	bne.n	8000ddc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fd63 	bl	8000958 <HAL_GetTick>
 8000e92:	eba0 0008 	sub.w	r0, r0, r8
 8000e96:	2864      	cmp	r0, #100	; 0x64
 8000e98:	d9ec      	bls.n	8000e74 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	e7d2      	b.n	8000e44 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	b932      	cbnz	r2, 8000eb0 <HAL_RCC_OscConfig+0xe0>
 8000ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea6:	6023      	str	r3, [r4, #0]
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	e7d3      	b.n	8000e58 <HAL_RCC_OscConfig+0x88>
 8000eb0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000eb4:	d1f5      	bne.n	8000ea2 <HAL_RCC_OscConfig+0xd2>
 8000eb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eba:	6023      	str	r3, [r4, #0]
 8000ebc:	e7c9      	b.n	8000e52 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fd4b 	bl	8000958 <HAL_GetTick>
 8000ec2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ec6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec8:	2701      	movs	r7, #1
 8000eca:	fa96 f3a6 	rbit	r3, r6
 8000ece:	6822      	ldr	r2, [r4, #0]
 8000ed0:	fa96 f3a6 	rbit	r3, r6
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	fa07 f303 	lsl.w	r3, r7, r3
 8000ee0:	4213      	tst	r3, r2
 8000ee2:	f43f af7b 	beq.w	8000ddc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fd37 	bl	8000958 <HAL_GetTick>
 8000eea:	eba0 0008 	sub.w	r0, r0, r8
 8000eee:	2864      	cmp	r0, #100	; 0x64
 8000ef0:	d9eb      	bls.n	8000eca <HAL_RCC_OscConfig+0xfa>
 8000ef2:	e7d2      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ef4:	4c7d      	ldr	r4, [pc, #500]	; (80010ec <HAL_RCC_OscConfig+0x31c>)
 8000ef6:	6863      	ldr	r3, [r4, #4]
 8000ef8:	f013 0f0c 	tst.w	r3, #12
 8000efc:	d007      	beq.n	8000f0e <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000efe:	6863      	ldr	r3, [r4, #4]
 8000f00:	f003 030c 	and.w	r3, r3, #12
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d121      	bne.n	8000f4c <HAL_RCC_OscConfig+0x17c>
 8000f08:	6863      	ldr	r3, [r4, #4]
 8000f0a:	03de      	lsls	r6, r3, #15
 8000f0c:	d41e      	bmi.n	8000f4c <HAL_RCC_OscConfig+0x17c>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f14:	6821      	ldr	r1, [r4, #0]
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2201      	movs	r2, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	420b      	tst	r3, r1
 8000f2a:	d002      	beq.n	8000f32 <HAL_RCC_OscConfig+0x162>
 8000f2c:	692b      	ldr	r3, [r5, #16]
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d187      	bne.n	8000e42 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f32:	6821      	ldr	r1, [r4, #0]
 8000f34:	23f8      	movs	r3, #248	; 0xf8
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	fab3 f283 	clz	r2, r3
 8000f3e:	696b      	ldr	r3, [r5, #20]
 8000f40:	4093      	lsls	r3, r2
 8000f42:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000f46:	4313      	orrs	r3, r2
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	e74b      	b.n	8000de4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f4c:	692a      	ldr	r2, [r5, #16]
 8000f4e:	2601      	movs	r6, #1
 8000f50:	b30a      	cbz	r2, 8000f96 <HAL_RCC_OscConfig+0x1c6>
 8000f52:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	2702      	movs	r7, #2
 8000f66:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f68:	f7ff fcf6 	bl	8000958 <HAL_GetTick>
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f72:	6822      	ldr	r2, [r4, #0]
 8000f74:	fa97 f3a7 	rbit	r3, r7
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	fa06 f303 	lsl.w	r3, r6, r3
 8000f84:	4213      	tst	r3, r2
 8000f86:	d1d4      	bne.n	8000f32 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f88:	f7ff fce6 	bl	8000958 <HAL_GetTick>
 8000f8c:	eba0 0008 	sub.w	r0, r0, r8
 8000f90:	2802      	cmp	r0, #2
 8000f92:	d9ec      	bls.n	8000f6e <HAL_RCC_OscConfig+0x19e>
 8000f94:	e781      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
 8000f96:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	2702      	movs	r7, #2
 8000faa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fac:	f7ff fcd4 	bl	8000958 <HAL_GetTick>
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb6:	6822      	ldr	r2, [r4, #0]
 8000fb8:	fa97 f3a7 	rbit	r3, r7
 8000fbc:	fab3 f383 	clz	r3, r3
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa06 f303 	lsl.w	r3, r6, r3
 8000fc8:	4213      	tst	r3, r2
 8000fca:	f43f af0b 	beq.w	8000de4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff fcc3 	bl	8000958 <HAL_GetTick>
 8000fd2:	eba0 0008 	sub.w	r0, r0, r8
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9eb      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x1e2>
 8000fda:	e75e      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fdc:	69aa      	ldr	r2, [r5, #24]
 8000fde:	4e43      	ldr	r6, [pc, #268]	; (80010ec <HAL_RCC_OscConfig+0x31c>)
 8000fe0:	4943      	ldr	r1, [pc, #268]	; (80010f0 <HAL_RCC_OscConfig+0x320>)
 8000fe2:	2401      	movs	r4, #1
 8000fe4:	b31a      	cbz	r2, 800102e <HAL_RCC_OscConfig+0x25e>
 8000fe6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	440b      	add	r3, r1
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	2702      	movs	r7, #2
 8000ff4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fcaf 	bl	8000958 <HAL_GetTick>
 8000ffa:	4680      	mov	r8, r0
 8000ffc:	fa97 f3a7 	rbit	r3, r7
 8001000:	fa97 f3a7 	rbit	r3, r7
 8001004:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001008:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800100a:	fa97 f3a7 	rbit	r3, r7
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	fa04 f303 	lsl.w	r3, r4, r3
 800101a:	4213      	tst	r3, r2
 800101c:	f47f aee6 	bne.w	8000dec <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001020:	f7ff fc9a 	bl	8000958 <HAL_GetTick>
 8001024:	eba0 0008 	sub.w	r0, r0, r8
 8001028:	2802      	cmp	r0, #2
 800102a:	d9e7      	bls.n	8000ffc <HAL_RCC_OscConfig+0x22c>
 800102c:	e735      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
 800102e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	440b      	add	r3, r1
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	2702      	movs	r7, #2
 800103c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800103e:	f7ff fc8b 	bl	8000958 <HAL_GetTick>
 8001042:	4680      	mov	r8, r0
 8001044:	fa97 f3a7 	rbit	r3, r7
 8001048:	fa97 f3a7 	rbit	r3, r7
 800104c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001050:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001052:	fa97 f3a7 	rbit	r3, r7
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	fa04 f303 	lsl.w	r3, r4, r3
 8001062:	4213      	tst	r3, r2
 8001064:	f43f aec2 	beq.w	8000dec <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fc76 	bl	8000958 <HAL_GetTick>
 800106c:	eba0 0008 	sub.w	r0, r0, r8
 8001070:	2802      	cmp	r0, #2
 8001072:	d9e7      	bls.n	8001044 <HAL_RCC_OscConfig+0x274>
 8001074:	e711      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001076:	4c1d      	ldr	r4, [pc, #116]	; (80010ec <HAL_RCC_OscConfig+0x31c>)
 8001078:	69e3      	ldr	r3, [r4, #28]
 800107a:	00d9      	lsls	r1, r3, #3
 800107c:	d434      	bmi.n	80010e8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	69e3      	ldr	r3, [r4, #28]
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	61e3      	str	r3, [r4, #28]
 8001086:	69e3      	ldr	r3, [r4, #28]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001090:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001092:	4f18      	ldr	r7, [pc, #96]	; (80010f4 <HAL_RCC_OscConfig+0x324>)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	05da      	lsls	r2, r3, #23
 8001098:	d52e      	bpl.n	80010f8 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109a:	68eb      	ldr	r3, [r5, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d13c      	bne.n	800111a <HAL_RCC_OscConfig+0x34a>
 80010a0:	6a23      	ldr	r3, [r4, #32]
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc56 	bl	8000958 <HAL_GetTick>
 80010ac:	2702      	movs	r7, #2
 80010ae:	4682      	mov	sl, r0
 80010b0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b2:	f04f 0801 	mov.w	r8, #1
 80010b6:	fa97 f3a7 	rbit	r3, r7
 80010ba:	fa97 f3a7 	rbit	r3, r7
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d06b      	beq.n	800119a <HAL_RCC_OscConfig+0x3ca>
 80010c2:	6a22      	ldr	r2, [r4, #32]
 80010c4:	fa99 f3a9 	rbit	r3, r9
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	fa08 f303 	lsl.w	r3, r8, r3
 80010d4:	4213      	tst	r3, r2
 80010d6:	d057      	beq.n	8001188 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80010d8:	2e00      	cmp	r6, #0
 80010da:	f43f ae8b 	beq.w	8000df4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010de:	69e3      	ldr	r3, [r4, #28]
 80010e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e4:	61e3      	str	r3, [r4, #28]
 80010e6:	e685      	b.n	8000df4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80010e8:	2600      	movs	r6, #0
 80010ea:	e7d2      	b.n	8001092 <HAL_RCC_OscConfig+0x2c2>
 80010ec:	40021000 	.word	0x40021000
 80010f0:	10908120 	.word	0x10908120
 80010f4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fe:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001100:	f7ff fc2a 	bl	8000958 <HAL_GetTick>
 8001104:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	d4c6      	bmi.n	800109a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110c:	f7ff fc24 	bl	8000958 <HAL_GetTick>
 8001110:	eba0 0008 	sub.w	r0, r0, r8
 8001114:	2864      	cmp	r0, #100	; 0x64
 8001116:	d9f6      	bls.n	8001106 <HAL_RCC_OscConfig+0x336>
 8001118:	e6bf      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111a:	bb3b      	cbnz	r3, 800116c <HAL_RCC_OscConfig+0x39c>
 800111c:	6a23      	ldr	r3, [r4, #32]
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6223      	str	r3, [r4, #32]
 8001124:	6a23      	ldr	r3, [r4, #32]
 8001126:	f023 0304 	bic.w	r3, r3, #4
 800112a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800112c:	f7ff fc14 	bl	8000958 <HAL_GetTick>
 8001130:	2702      	movs	r7, #2
 8001132:	4682      	mov	sl, r0
 8001134:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001136:	f04f 0801 	mov.w	r8, #1
 800113a:	fa97 f3a7 	rbit	r3, r7
 800113e:	fa97 f3a7 	rbit	r3, r7
 8001142:	b373      	cbz	r3, 80011a2 <HAL_RCC_OscConfig+0x3d2>
 8001144:	6a22      	ldr	r2, [r4, #32]
 8001146:	fa99 f3a9 	rbit	r3, r9
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	fa08 f303 	lsl.w	r3, r8, r3
 8001156:	4213      	tst	r3, r2
 8001158:	d0be      	beq.n	80010d8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800115a:	f7ff fbfd 	bl	8000958 <HAL_GetTick>
 800115e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001162:	eba0 000a 	sub.w	r0, r0, sl
 8001166:	4298      	cmp	r0, r3
 8001168:	d9e7      	bls.n	800113a <HAL_RCC_OscConfig+0x36a>
 800116a:	e696      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	2b05      	cmp	r3, #5
 800116e:	6a23      	ldr	r3, [r4, #32]
 8001170:	d103      	bne.n	800117a <HAL_RCC_OscConfig+0x3aa>
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6223      	str	r3, [r4, #32]
 8001178:	e792      	b.n	80010a0 <HAL_RCC_OscConfig+0x2d0>
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	6223      	str	r3, [r4, #32]
 8001180:	6a23      	ldr	r3, [r4, #32]
 8001182:	f023 0304 	bic.w	r3, r3, #4
 8001186:	e78e      	b.n	80010a6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001188:	f7ff fbe6 	bl	8000958 <HAL_GetTick>
 800118c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001190:	eba0 000a 	sub.w	r0, r0, sl
 8001194:	4298      	cmp	r0, r3
 8001196:	d98e      	bls.n	80010b6 <HAL_RCC_OscConfig+0x2e6>
 8001198:	e67f      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
 800119a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a0:	e790      	b.n	80010c4 <HAL_RCC_OscConfig+0x2f4>
 80011a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a8:	e7cd      	b.n	8001146 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011aa:	4c41      	ldr	r4, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x4e0>)
 80011ac:	6863      	ldr	r3, [r4, #4]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	f43f ae45 	beq.w	8000e42 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b8:	2a02      	cmp	r2, #2
 80011ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011be:	d152      	bne.n	8001266 <HAL_RCC_OscConfig+0x496>
 80011c0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011d6:	f7ff fbbf 	bl	8000958 <HAL_GetTick>
 80011da:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80011de:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e0:	2601      	movs	r6, #1
 80011e2:	fa97 f3a7 	rbit	r3, r7
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	fa97 f3a7 	rbit	r3, r7
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	fa06 f303 	lsl.w	r3, r6, r3
 80011f8:	4213      	tst	r3, r2
 80011fa:	d12d      	bne.n	8001258 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fc:	6862      	ldr	r2, [r4, #4]
 80011fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001200:	6a29      	ldr	r1, [r5, #32]
 8001202:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001206:	430b      	orrs	r3, r1
 8001208:	4313      	orrs	r3, r2
 800120a:	6063      	str	r3, [r4, #4]
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800121c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001226:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001228:	f7ff fb96 	bl	8000958 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800122c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800122e:	4607      	mov	r7, r0
 8001230:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001234:	6822      	ldr	r2, [r4, #0]
 8001236:	fa95 f3a5 	rbit	r3, r5
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	fa06 f303 	lsl.w	r3, r6, r3
 8001246:	4213      	tst	r3, r2
 8001248:	f47f add8 	bne.w	8000dfc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124c:	f7ff fb84 	bl	8000958 <HAL_GetTick>
 8001250:	1bc0      	subs	r0, r0, r7
 8001252:	2802      	cmp	r0, #2
 8001254:	d9ec      	bls.n	8001230 <HAL_RCC_OscConfig+0x460>
 8001256:	e620      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fb7e 	bl	8000958 <HAL_GetTick>
 800125c:	eba0 0008 	sub.w	r0, r0, r8
 8001260:	2802      	cmp	r0, #2
 8001262:	d9be      	bls.n	80011e2 <HAL_RCC_OscConfig+0x412>
 8001264:	e619      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
 8001266:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001272:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800127c:	f7ff fb6c 	bl	8000958 <HAL_GetTick>
 8001280:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001284:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	2601      	movs	r6, #1
 8001288:	fa95 f3a5 	rbit	r3, r5
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	fa95 f3a5 	rbit	r3, r5
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	fa06 f303 	lsl.w	r3, r6, r3
 800129e:	4213      	tst	r3, r2
 80012a0:	f43f adac 	beq.w	8000dfc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb58 	bl	8000958 <HAL_GetTick>
 80012a8:	1bc0      	subs	r0, r0, r7
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d9ec      	bls.n	8001288 <HAL_RCC_OscConfig+0x4b8>
 80012ae:	e5f4      	b.n	8000e9a <HAL_RCC_OscConfig+0xca>
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80012b6:	4c13      	ldr	r4, [pc, #76]	; (8001304 <HAL_RCC_GetSysClockFreq+0x50>)
 80012b8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ba:	f001 030c 	and.w	r3, r1, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11e      	bne.n	8001300 <HAL_RCC_GetSysClockFreq+0x4c>
 80012c2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80012c6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80012ca:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_RCC_GetSysClockFreq+0x54>)
 80012d8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012dc:	220f      	movs	r2, #15
 80012de:	fa92 f2a2 	rbit	r2, r2
 80012e2:	fab2 f282 	clz	r2, r2
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	40d3      	lsrs	r3, r2
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_RCC_GetSysClockFreq+0x58>)
 80012ee:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80012f0:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80012f2:	bf4a      	itet	mi
 80012f4:	4b06      	ldrmi	r3, [pc, #24]	; (8001310 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80012f6:	4b07      	ldrpl	r3, [pc, #28]	; (8001314 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80012f8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80012fc:	4358      	muls	r0, r3
 80012fe:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001302:	bd10      	pop	{r4, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	08002158 	.word	0x08002158
 800130c:	08002168 	.word	0x08002168
 8001310:	007a1200 	.word	0x007a1200
 8001314:	003d0900 	.word	0x003d0900

08001318 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001318:	4a5c      	ldr	r2, [pc, #368]	; (800148c <HAL_RCC_ClockConfig+0x174>)
 800131a:	6813      	ldr	r3, [r2, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	428b      	cmp	r3, r1
{
 8001322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001326:	4606      	mov	r6, r0
 8001328:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800132a:	d330      	bcc.n	800138e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132c:	6832      	ldr	r2, [r6, #0]
 800132e:	0791      	lsls	r1, r2, #30
 8001330:	d43a      	bmi.n	80013a8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001332:	07d2      	lsls	r2, r2, #31
 8001334:	d440      	bmi.n	80013b8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001336:	4a55      	ldr	r2, [pc, #340]	; (800148c <HAL_RCC_ClockConfig+0x174>)
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	429d      	cmp	r5, r3
 8001340:	f0c0 8092 	bcc.w	8001468 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	6832      	ldr	r2, [r6, #0]
 8001346:	4c52      	ldr	r4, [pc, #328]	; (8001490 <HAL_RCC_ClockConfig+0x178>)
 8001348:	f012 0f04 	tst.w	r2, #4
 800134c:	f040 8097 	bne.w	800147e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001350:	0713      	lsls	r3, r2, #28
 8001352:	d506      	bpl.n	8001362 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	6932      	ldr	r2, [r6, #16]
 8001358:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800135c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001360:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001362:	f7ff ffa7 	bl	80012b4 <HAL_RCC_GetSysClockFreq>
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	22f0      	movs	r2, #240	; 0xf0
 800136a:	fa92 f2a2 	rbit	r2, r2
 800136e:	fab2 f282 	clz	r2, r2
 8001372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001376:	40d3      	lsrs	r3, r2
 8001378:	4a46      	ldr	r2, [pc, #280]	; (8001494 <HAL_RCC_ClockConfig+0x17c>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	40d8      	lsrs	r0, r3
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_RCC_ClockConfig+0x180>)
 8001380:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff faba 	bl	80008fc <HAL_InitTick>
  return HAL_OK;
 8001388:	2000      	movs	r0, #0
}
 800138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f023 0307 	bic.w	r3, r3, #7
 8001394:	430b      	orrs	r3, r1
 8001396:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001398:	6813      	ldr	r3, [r2, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	4299      	cmp	r1, r3
 80013a0:	d0c4      	beq.n	800132c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80013a2:	2001      	movs	r0, #1
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4939      	ldr	r1, [pc, #228]	; (8001490 <HAL_RCC_ClockConfig+0x178>)
 80013aa:	68b0      	ldr	r0, [r6, #8]
 80013ac:	684b      	ldr	r3, [r1, #4]
 80013ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013b2:	4303      	orrs	r3, r0
 80013b4:	604b      	str	r3, [r1, #4]
 80013b6:	e7bc      	b.n	8001332 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b8:	6872      	ldr	r2, [r6, #4]
 80013ba:	4c35      	ldr	r4, [pc, #212]	; (8001490 <HAL_RCC_ClockConfig+0x178>)
 80013bc:	2a01      	cmp	r2, #1
 80013be:	d128      	bne.n	8001412 <HAL_RCC_ClockConfig+0xfa>
 80013c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c8:	6821      	ldr	r1, [r4, #0]
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	d0e1      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013de:	6863      	ldr	r3, [r4, #4]
 80013e0:	f023 0303 	bic.w	r3, r3, #3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80013e8:	f7ff fab6 	bl	8000958 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ec:	6873      	ldr	r3, [r6, #4]
 80013ee:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80013f0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f6:	d11f      	bne.n	8001438 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d099      	beq.n	8001336 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001402:	f7ff faa9 	bl	8000958 <HAL_GetTick>
 8001406:	1bc0      	subs	r0, r0, r7
 8001408:	4540      	cmp	r0, r8
 800140a:	d9f5      	bls.n	80013f8 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 800140c:	2003      	movs	r0, #3
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001412:	2a02      	cmp	r2, #2
 8001414:	bf0c      	ite	eq
 8001416:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800141a:	2302      	movne	r3, #2
 800141c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	2101      	movs	r1, #1
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	4203      	tst	r3, r0
 8001436:	e7d1      	b.n	80013dc <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001438:	2b02      	cmp	r3, #2
 800143a:	d110      	bne.n	800145e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800143c:	6863      	ldr	r3, [r4, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	f43f af77 	beq.w	8001336 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff fa86 	bl	8000958 <HAL_GetTick>
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	4540      	cmp	r0, r8
 8001450:	d9f4      	bls.n	800143c <HAL_RCC_ClockConfig+0x124>
 8001452:	e7db      	b.n	800140c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001454:	f7ff fa80 	bl	8000958 <HAL_GetTick>
 8001458:	1bc0      	subs	r0, r0, r7
 800145a:	4540      	cmp	r0, r8
 800145c:	d8d6      	bhi.n	800140c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	f013 0f0c 	tst.w	r3, #12
 8001464:	d1f6      	bne.n	8001454 <HAL_RCC_ClockConfig+0x13c>
 8001466:	e766      	b.n	8001336 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	f023 0307 	bic.w	r3, r3, #7
 800146e:	432b      	orrs	r3, r5
 8001470:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	429d      	cmp	r5, r3
 800147a:	d192      	bne.n	80013a2 <HAL_RCC_ClockConfig+0x8a>
 800147c:	e762      	b.n	8001344 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800147e:	6863      	ldr	r3, [r4, #4]
 8001480:	68f1      	ldr	r1, [r6, #12]
 8001482:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001486:	430b      	orrs	r3, r1
 8001488:	6063      	str	r3, [r4, #4]
 800148a:	e761      	b.n	8001350 <HAL_RCC_ClockConfig+0x38>
 800148c:	40022000 	.word	0x40022000
 8001490:	40021000 	.word	0x40021000
 8001494:	08002124 	.word	0x08002124
 8001498:	20000000 	.word	0x20000000

0800149c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014a8:	6803      	ldr	r3, [r0, #0]
{
 80014aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014ae:	03dd      	lsls	r5, r3, #15
{
 80014b0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014b2:	d523      	bpl.n	80014fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b4:	4d7c      	ldr	r5, [pc, #496]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80014b6:	69eb      	ldr	r3, [r5, #28]
 80014b8:	00d8      	lsls	r0, r3, #3
 80014ba:	f100 8098 	bmi.w	80015ee <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	69eb      	ldr	r3, [r5, #28]
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61eb      	str	r3, [r5, #28]
 80014c6:	69eb      	ldr	r3, [r5, #28]
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014d0:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4f76      	ldr	r7, [pc, #472]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	05d9      	lsls	r1, r3, #23
 80014d8:	f140 808b 	bpl.w	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014dc:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014de:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014e2:	f040 809b 	bne.w	800161c <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80014e6:	6a2b      	ldr	r3, [r5, #32]
 80014e8:	6862      	ldr	r2, [r4, #4]
 80014ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ee:	4313      	orrs	r3, r2
 80014f0:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014f2:	b11e      	cbz	r6, 80014fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	69eb      	ldr	r3, [r5, #28]
 80014f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fa:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014fc:	6820      	ldr	r0, [r4, #0]
 80014fe:	07c7      	lsls	r7, r0, #31
 8001500:	d506      	bpl.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001502:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001504:	68a1      	ldr	r1, [r4, #8]
 8001506:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001508:	f023 0303 	bic.w	r3, r3, #3
 800150c:	430b      	orrs	r3, r1
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001510:	0786      	lsls	r6, r0, #30
 8001512:	d506      	bpl.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001514:	4a64      	ldr	r2, [pc, #400]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001516:	68e1      	ldr	r1, [r4, #12]
 8001518:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800151a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800151e:	430b      	orrs	r3, r1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001522:	0745      	lsls	r5, r0, #29
 8001524:	d506      	bpl.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001526:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001528:	6921      	ldr	r1, [r4, #16]
 800152a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800152c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001530:	430b      	orrs	r3, r1
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001534:	0681      	lsls	r1, r0, #26
 8001536:	d506      	bpl.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001538:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800153a:	69e1      	ldr	r1, [r4, #28]
 800153c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800153e:	f023 0310 	bic.w	r3, r3, #16
 8001542:	430b      	orrs	r3, r1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001546:	0382      	lsls	r2, r0, #14
 8001548:	d506      	bpl.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800154a:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800154c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800154e:	6853      	ldr	r3, [r2, #4]
 8001550:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001554:	430b      	orrs	r3, r1
 8001556:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001558:	0643      	lsls	r3, r0, #25
 800155a:	d506      	bpl.n	800156a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800155e:	6a21      	ldr	r1, [r4, #32]
 8001560:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001562:	f023 0320 	bic.w	r3, r3, #32
 8001566:	430b      	orrs	r3, r1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800156a:	0707      	lsls	r7, r0, #28
 800156c:	d506      	bpl.n	800157c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800156e:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001570:	6961      	ldr	r1, [r4, #20]
 8001572:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001574:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001578:	430b      	orrs	r3, r1
 800157a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800157c:	06c6      	lsls	r6, r0, #27
 800157e:	d506      	bpl.n	800158e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001580:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001582:	69a1      	ldr	r1, [r4, #24]
 8001584:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001586:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800158a:	430b      	orrs	r3, r1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800158e:	0585      	lsls	r5, r0, #22
 8001590:	d506      	bpl.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001592:	4a45      	ldr	r2, [pc, #276]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001594:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001596:	6853      	ldr	r3, [r2, #4]
 8001598:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800159c:	430b      	orrs	r3, r1
 800159e:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80015a0:	0601      	lsls	r1, r0, #24
 80015a2:	d506      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80015a4:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80015a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80015a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015aa:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80015ae:	430b      	orrs	r3, r1
 80015b0:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80015b2:	05c2      	lsls	r2, r0, #23
 80015b4:	d506      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80015b6:	4a3c      	ldr	r2, [pc, #240]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80015b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80015ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015bc:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80015c0:	430b      	orrs	r3, r1
 80015c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80015c4:	04c3      	lsls	r3, r0, #19
 80015c6:	d506      	bpl.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80015c8:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80015ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80015cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80015d6:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80015da:	d01c      	beq.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80015dc:	4a32      	ldr	r2, [pc, #200]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80015de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015e6:	430b      	orrs	r3, r1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80015ea:	2000      	movs	r0, #0
 80015ec:	e013      	b.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2600      	movs	r6, #0
 80015f0:	e76f      	b.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80015fa:	f7ff f9ad 	bl	8000958 <HAL_GetTick>
 80015fe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	05da      	lsls	r2, r3, #23
 8001604:	f53f af6a 	bmi.w	80014dc <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001608:	f7ff f9a6 	bl	8000958 <HAL_GetTick>
 800160c:	eba0 0008 	sub.w	r0, r0, r8
 8001610:	2864      	cmp	r0, #100	; 0x64
 8001612:	d9f5      	bls.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8001614:	2003      	movs	r0, #3
}
 8001616:	b002      	add	sp, #8
 8001618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800161c:	6862      	ldr	r2, [r4, #4]
 800161e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001622:	4293      	cmp	r3, r2
 8001624:	f43f af5f 	beq.w	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001628:	6a29      	ldr	r1, [r5, #32]
 800162a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162e:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001632:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001636:	f8df e078 	ldr.w	lr, [pc, #120]	; 80016b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800163a:	fab2 f282 	clz	r2, r2
 800163e:	4472      	add	r2, lr
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	2701      	movs	r7, #1
 8001644:	6017      	str	r7, [r2, #0]
 8001646:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	4473      	add	r3, lr
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001656:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8001658:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800165a:	f57f af44 	bpl.w	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 800165e:	f7ff f97b 	bl	8000958 <HAL_GetTick>
 8001662:	f04f 0802 	mov.w	r8, #2
 8001666:	4682      	mov	sl, r0
 8001668:	46c1      	mov	r9, r8
 800166a:	fa98 f3a8 	rbit	r3, r8
 800166e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	b1a3      	cbz	r3, 800169e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8001674:	6a2a      	ldr	r2, [r5, #32]
 8001676:	fa99 f3a9 	rbit	r3, r9
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	fa07 f303 	lsl.w	r3, r7, r3
 8001686:	4213      	tst	r3, r2
 8001688:	f47f af2d 	bne.w	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff f964 	bl	8000958 <HAL_GetTick>
 8001690:	f241 3388 	movw	r3, #5000	; 0x1388
 8001694:	eba0 000a 	sub.w	r0, r0, sl
 8001698:	4298      	cmp	r0, r3
 800169a:	d9e6      	bls.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800169c:	e7ba      	b.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800169e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80016a4:	e7e7      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
 80016b0:	10908100 	.word	0x10908100

080016b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016b6:	4604      	mov	r4, r0
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d04e      	beq.n	800175a <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016c0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80016c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016c8:	b91b      	cbnz	r3, 80016d2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016ca:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016ce:	f7fe fecd 	bl	800046c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016d2:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016d4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80016d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80016da:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016dc:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80016de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016e2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016ec:	d932      	bls.n	8001754 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80016ee:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80016f0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f4:	bf18      	it	ne
 80016f6:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80016f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016fa:	b92b      	cbnz	r3, 8001708 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016fc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001700:	bf8c      	ite	hi
 8001702:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001704:	2301      	movls	r3, #1
 8001706:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001708:	68a6      	ldr	r6, [r4, #8]
 800170a:	6863      	ldr	r3, [r4, #4]
 800170c:	69a5      	ldr	r5, [r4, #24]
 800170e:	4333      	orrs	r3, r6
 8001710:	6926      	ldr	r6, [r4, #16]
 8001712:	4333      	orrs	r3, r6
 8001714:	6966      	ldr	r6, [r4, #20]
 8001716:	4333      	orrs	r3, r6
 8001718:	69e6      	ldr	r6, [r4, #28]
 800171a:	4333      	orrs	r3, r6
 800171c:	6a26      	ldr	r6, [r4, #32]
 800171e:	4333      	orrs	r3, r6
 8001720:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001722:	4333      	orrs	r3, r6
 8001724:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001728:	4333      	orrs	r3, r6
 800172a:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800172c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800172e:	431a      	orrs	r2, r3
 8001730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001732:	0c2d      	lsrs	r5, r5, #16
 8001734:	431a      	orrs	r2, r3
 8001736:	f005 0504 	and.w	r5, r5, #4
 800173a:	432a      	orrs	r2, r5
 800173c:	4302      	orrs	r2, r0
 800173e:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001740:	69cb      	ldr	r3, [r1, #28]
 8001742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001746:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001748:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800174a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800174c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800174e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001752:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001754:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001758:	e7cc      	b.n	80016f4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
}
 800175c:	bd70      	pop	{r4, r5, r6, pc}

0800175e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800175e:	6803      	ldr	r3, [r0, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001770:	2000      	movs	r0, #0
 8001772:	4770      	bx	lr

08001774 <HAL_TIM_PWM_MspInit>:
 8001774:	4770      	bx	lr

08001776 <HAL_TIM_OC_DelayElapsedCallback>:
 8001776:	4770      	bx	lr

08001778 <HAL_TIM_IC_CaptureCallback>:
 8001778:	4770      	bx	lr

0800177a <HAL_TIM_PWM_PulseFinishedCallback>:
 800177a:	4770      	bx	lr

0800177c <HAL_TIM_TriggerCallback>:
 800177c:	4770      	bx	lr

0800177e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800177e:	6803      	ldr	r3, [r0, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	0791      	lsls	r1, r2, #30
{
 8001784:	b510      	push	{r4, lr}
 8001786:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001788:	d50f      	bpl.n	80017aa <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	0792      	lsls	r2, r2, #30
 800178e:	d50c      	bpl.n	80017aa <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001790:	f06f 0202 	mvn.w	r2, #2
 8001794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001796:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001798:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800179a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800179c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800179e:	f000 8085 	beq.w	80018ac <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	f7ff ffe9 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a6:	2300      	movs	r3, #0
 80017a8:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	0752      	lsls	r2, r2, #29
 80017b0:	d510      	bpl.n	80017d4 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	0750      	lsls	r0, r2, #29
 80017b6:	d50d      	bpl.n	80017d4 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017b8:	f06f 0204 	mvn.w	r2, #4
 80017bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017be:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c6:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017c8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ca:	d075      	beq.n	80018b8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80017cc:	f7ff ffd4 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d0:	2300      	movs	r3, #0
 80017d2:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	0711      	lsls	r1, r2, #28
 80017da:	d50f      	bpl.n	80017fc <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	0712      	lsls	r2, r2, #28
 80017e0:	d50c      	bpl.n	80017fc <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017e2:	f06f 0208 	mvn.w	r2, #8
 80017e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017e8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ea:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ec:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ee:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017f0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f2:	d067      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80017f4:	f7ff ffc0 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f8:	2300      	movs	r3, #0
 80017fa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	06d0      	lsls	r0, r2, #27
 8001802:	d510      	bpl.n	8001826 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	06d1      	lsls	r1, r2, #27
 8001808:	d50d      	bpl.n	8001826 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800180a:	f06f 0210 	mvn.w	r2, #16
 800180e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001810:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001812:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001814:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001818:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800181a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800181c:	d058      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800181e:	f7ff ffab 	bl	8001778 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001822:	2300      	movs	r3, #0
 8001824:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	07d2      	lsls	r2, r2, #31
 800182c:	d508      	bpl.n	8001840 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	07d0      	lsls	r0, r2, #31
 8001832:	d505      	bpl.n	8001840 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001834:	f06f 0201 	mvn.w	r2, #1
 8001838:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800183a:	4620      	mov	r0, r4
 800183c:	f000 fbc6 	bl	8001fcc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	0611      	lsls	r1, r2, #24
 8001846:	d508      	bpl.n	800185a <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	0612      	lsls	r2, r2, #24
 800184c:	d505      	bpl.n	800185a <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800184e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001852:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001854:	4620      	mov	r0, r4
 8001856:	f000 fbb6 	bl	8001fc6 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	05d0      	lsls	r0, r2, #23
 8001860:	d508      	bpl.n	8001874 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	0611      	lsls	r1, r2, #24
 8001866:	d505      	bpl.n	8001874 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001868:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800186c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800186e:	4620      	mov	r0, r4
 8001870:	f000 fbaa 	bl	8001fc8 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	0652      	lsls	r2, r2, #25
 800187a:	d508      	bpl.n	800188e <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	0650      	lsls	r0, r2, #25
 8001880:	d505      	bpl.n	800188e <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001886:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff ff77 	bl	800177c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	0691      	lsls	r1, r2, #26
 8001894:	d522      	bpl.n	80018dc <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	0692      	lsls	r2, r2, #26
 800189a:	d51f      	bpl.n	80018dc <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800189c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018a2:	611a      	str	r2, [r3, #16]
    }
  }
}
 80018a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80018a8:	f000 bb8c 	b.w	8001fc4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ac:	f7ff ff63 	bl	8001776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff ff62 	bl	800177a <HAL_TIM_PWM_PulseFinishedCallback>
 80018b6:	e776      	b.n	80017a6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b8:	f7ff ff5d 	bl	8001776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff ff5c 	bl	800177a <HAL_TIM_PWM_PulseFinishedCallback>
 80018c2:	e785      	b.n	80017d0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c4:	f7ff ff57 	bl	8001776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff ff56 	bl	800177a <HAL_TIM_PWM_PulseFinishedCallback>
 80018ce:	e793      	b.n	80017f8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d0:	f7ff ff51 	bl	8001776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff ff50 	bl	800177a <HAL_TIM_PWM_PulseFinishedCallback>
 80018da:	e7a2      	b.n	8001822 <HAL_TIM_IRQHandler+0xa4>
 80018dc:	bd10      	pop	{r4, pc}
	...

080018e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e0:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <TIM_Base_SetConfig+0xb4>)
  tmpcr1 = TIMx->CR1;
 80018e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e4:	4290      	cmp	r0, r2
 80018e6:	d00e      	beq.n	8001906 <TIM_Base_SetConfig+0x26>
 80018e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018ec:	d00b      	beq.n	8001906 <TIM_Base_SetConfig+0x26>
 80018ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018f2:	4290      	cmp	r0, r2
 80018f4:	d007      	beq.n	8001906 <TIM_Base_SetConfig+0x26>
 80018f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018fa:	4290      	cmp	r0, r2
 80018fc:	d003      	beq.n	8001906 <TIM_Base_SetConfig+0x26>
 80018fe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001902:	4290      	cmp	r0, r2
 8001904:	d115      	bne.n	8001932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001906:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800190c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <TIM_Base_SetConfig+0xb4>)
 8001910:	4290      	cmp	r0, r2
 8001912:	d019      	beq.n	8001948 <TIM_Base_SetConfig+0x68>
 8001914:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001918:	d016      	beq.n	8001948 <TIM_Base_SetConfig+0x68>
 800191a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800191e:	4290      	cmp	r0, r2
 8001920:	d012      	beq.n	8001948 <TIM_Base_SetConfig+0x68>
 8001922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001926:	4290      	cmp	r0, r2
 8001928:	d00e      	beq.n	8001948 <TIM_Base_SetConfig+0x68>
 800192a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800192e:	4290      	cmp	r0, r2
 8001930:	d00a      	beq.n	8001948 <TIM_Base_SetConfig+0x68>
 8001932:	4a19      	ldr	r2, [pc, #100]	; (8001998 <TIM_Base_SetConfig+0xb8>)
 8001934:	4290      	cmp	r0, r2
 8001936:	d007      	beq.n	8001948 <TIM_Base_SetConfig+0x68>
 8001938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800193c:	4290      	cmp	r0, r2
 800193e:	d003      	beq.n	8001948 <TIM_Base_SetConfig+0x68>
 8001940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001944:	4290      	cmp	r0, r2
 8001946:	d103      	bne.n	8001950 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001948:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800194a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800194e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001950:	694a      	ldr	r2, [r1, #20]
 8001952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001956:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001958:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800195a:	688b      	ldr	r3, [r1, #8]
 800195c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800195e:	680b      	ldr	r3, [r1, #0]
 8001960:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <TIM_Base_SetConfig+0xb4>)
 8001964:	4298      	cmp	r0, r3
 8001966:	d00f      	beq.n	8001988 <TIM_Base_SetConfig+0xa8>
 8001968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196c:	4298      	cmp	r0, r3
 800196e:	d00b      	beq.n	8001988 <TIM_Base_SetConfig+0xa8>
 8001970:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001974:	4298      	cmp	r0, r3
 8001976:	d007      	beq.n	8001988 <TIM_Base_SetConfig+0xa8>
 8001978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800197c:	4298      	cmp	r0, r3
 800197e:	d003      	beq.n	8001988 <TIM_Base_SetConfig+0xa8>
 8001980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001984:	4298      	cmp	r0, r3
 8001986:	d101      	bne.n	800198c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001988:	690b      	ldr	r3, [r1, #16]
 800198a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800198c:	2301      	movs	r3, #1
 800198e:	6143      	str	r3, [r0, #20]
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40012c00 	.word	0x40012c00
 8001998:	40014000 	.word	0x40014000

0800199c <HAL_TIM_Base_Init>:
{ 
 800199c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800199e:	4604      	mov	r4, r0
 80019a0:	b1a0      	cbz	r0, 80019cc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019aa:	b91b      	cbnz	r3, 80019b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019b0:	f7fe fe32 	bl	8000618 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019b4:	2302      	movs	r3, #2
 80019b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019ba:	6820      	ldr	r0, [r4, #0]
 80019bc:	1d21      	adds	r1, r4, #4
 80019be:	f7ff ff8f 	bl	80018e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019c8:	2000      	movs	r0, #0
 80019ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
}
 80019ce:	bd10      	pop	{r4, pc}

080019d0 <HAL_TIM_PWM_Init>:
{
 80019d0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019d2:	4604      	mov	r4, r0
 80019d4:	b1a0      	cbz	r0, 8001a00 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019de:	b91b      	cbnz	r3, 80019e8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80019e4:	f7ff fec6 	bl	8001774 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019e8:	2302      	movs	r3, #2
 80019ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019ee:	6820      	ldr	r0, [r4, #0]
 80019f0:	1d21      	adds	r1, r4, #4
 80019f2:	f7ff ff75 	bl	80018e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019fc:	2000      	movs	r0, #0
 80019fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
}
 8001a02:	bd10      	pop	{r4, pc}

08001a04 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a04:	6a03      	ldr	r3, [r0, #32]
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a0c:	6a03      	ldr	r3, [r0, #32]
{
 8001a0e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001a10:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a12:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a1a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a1e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a20:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a22:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a26:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a28:	4d1b      	ldr	r5, [pc, #108]	; (8001a98 <TIM_OC1_SetConfig+0x94>)
 8001a2a:	42a8      	cmp	r0, r5
 8001a2c:	d00f      	beq.n	8001a4e <TIM_OC1_SetConfig+0x4a>
 8001a2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a32:	42a8      	cmp	r0, r5
 8001a34:	d00b      	beq.n	8001a4e <TIM_OC1_SetConfig+0x4a>
 8001a36:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001a3a:	42a8      	cmp	r0, r5
 8001a3c:	d007      	beq.n	8001a4e <TIM_OC1_SetConfig+0x4a>
 8001a3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d003      	beq.n	8001a4e <TIM_OC1_SetConfig+0x4a>
 8001a46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a4a:	42a8      	cmp	r0, r5
 8001a4c:	d11e      	bne.n	8001a8c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a4e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a50:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001a54:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a56:	4d10      	ldr	r5, [pc, #64]	; (8001a98 <TIM_OC1_SetConfig+0x94>)
 8001a58:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a5a:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a5e:	d00f      	beq.n	8001a80 <TIM_OC1_SetConfig+0x7c>
 8001a60:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001a64:	42a8      	cmp	r0, r5
 8001a66:	d00b      	beq.n	8001a80 <TIM_OC1_SetConfig+0x7c>
 8001a68:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001a6c:	42a8      	cmp	r0, r5
 8001a6e:	d007      	beq.n	8001a80 <TIM_OC1_SetConfig+0x7c>
 8001a70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a74:	42a8      	cmp	r0, r5
 8001a76:	d003      	beq.n	8001a80 <TIM_OC1_SetConfig+0x7c>
 8001a78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a7c:	42a8      	cmp	r0, r5
 8001a7e:	d105      	bne.n	8001a8c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a80:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a84:	698e      	ldr	r6, [r1, #24]
 8001a86:	694c      	ldr	r4, [r1, #20]
 8001a88:	4334      	orrs	r4, r6
 8001a8a:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a8c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a8e:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a90:	684a      	ldr	r2, [r1, #4]
 8001a92:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001a94:	6203      	str	r3, [r0, #32]
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
 8001a98:	40012c00 	.word	0x40012c00

08001a9c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a9c:	6a03      	ldr	r3, [r0, #32]
 8001a9e:	f023 0310 	bic.w	r3, r3, #16
 8001aa2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aa4:	6a03      	ldr	r3, [r0, #32]
{
 8001aa6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001aa8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001aaa:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001aac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001aae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ab2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ab6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001aba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001abc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ac0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ac4:	4d16      	ldr	r5, [pc, #88]	; (8001b20 <TIM_OC2_SetConfig+0x84>)
 8001ac6:	42a8      	cmp	r0, r5
 8001ac8:	d003      	beq.n	8001ad2 <TIM_OC2_SetConfig+0x36>
 8001aca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ace:	42a8      	cmp	r0, r5
 8001ad0:	d10d      	bne.n	8001aee <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ad2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ad8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001adc:	4d10      	ldr	r5, [pc, #64]	; (8001b20 <TIM_OC2_SetConfig+0x84>)
 8001ade:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ae4:	d00e      	beq.n	8001b04 <TIM_OC2_SetConfig+0x68>
 8001ae6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001aea:	42a8      	cmp	r0, r5
 8001aec:	d00a      	beq.n	8001b04 <TIM_OC2_SetConfig+0x68>
 8001aee:	4d0d      	ldr	r5, [pc, #52]	; (8001b24 <TIM_OC2_SetConfig+0x88>)
 8001af0:	42a8      	cmp	r0, r5
 8001af2:	d007      	beq.n	8001b04 <TIM_OC2_SetConfig+0x68>
 8001af4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001af8:	42a8      	cmp	r0, r5
 8001afa:	d003      	beq.n	8001b04 <TIM_OC2_SetConfig+0x68>
 8001afc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b00:	42a8      	cmp	r0, r5
 8001b02:	d106      	bne.n	8001b12 <TIM_OC2_SetConfig+0x76>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b04:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b08:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b0a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b0c:	4334      	orrs	r4, r6
 8001b0e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b12:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b14:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b16:	684a      	ldr	r2, [r1, #4]
 8001b18:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b1a:	6203      	str	r3, [r0, #32]
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}
 8001b1e:	bf00      	nop
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40014000 	.word	0x40014000

08001b28 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b28:	6a03      	ldr	r3, [r0, #32]
 8001b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b2e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b30:	6a03      	ldr	r3, [r0, #32]
{
 8001b32:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b34:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001b3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b3e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b42:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b44:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001b46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b4e:	4d16      	ldr	r5, [pc, #88]	; (8001ba8 <TIM_OC3_SetConfig+0x80>)
 8001b50:	42a8      	cmp	r0, r5
 8001b52:	d003      	beq.n	8001b5c <TIM_OC3_SetConfig+0x34>
 8001b54:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b58:	42a8      	cmp	r0, r5
 8001b5a:	d10d      	bne.n	8001b78 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b5c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b66:	4d10      	ldr	r5, [pc, #64]	; (8001ba8 <TIM_OC3_SetConfig+0x80>)
 8001b68:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b6e:	d00e      	beq.n	8001b8e <TIM_OC3_SetConfig+0x66>
 8001b70:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b74:	42a8      	cmp	r0, r5
 8001b76:	d00a      	beq.n	8001b8e <TIM_OC3_SetConfig+0x66>
 8001b78:	4d0c      	ldr	r5, [pc, #48]	; (8001bac <TIM_OC3_SetConfig+0x84>)
 8001b7a:	42a8      	cmp	r0, r5
 8001b7c:	d007      	beq.n	8001b8e <TIM_OC3_SetConfig+0x66>
 8001b7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b82:	42a8      	cmp	r0, r5
 8001b84:	d003      	beq.n	8001b8e <TIM_OC3_SetConfig+0x66>
 8001b86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b8a:	42a8      	cmp	r0, r5
 8001b8c:	d106      	bne.n	8001b9c <TIM_OC3_SetConfig+0x74>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b8e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b92:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b94:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b96:	4334      	orrs	r4, r6
 8001b98:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b9c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b9e:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ba0:	684a      	ldr	r2, [r1, #4]
 8001ba2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ba4:	6203      	str	r3, [r0, #32]
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40014000 	.word	0x40014000

08001bb0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001bb0:	6a03      	ldr	r3, [r0, #32]
 8001bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bb6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bb8:	6a03      	ldr	r3, [r0, #32]
{
 8001bba:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001bbc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bbe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bc0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bc2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001bc6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bd4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd8:	4d0e      	ldr	r5, [pc, #56]	; (8001c14 <TIM_OC4_SetConfig+0x64>)
 8001bda:	42a8      	cmp	r0, r5
 8001bdc:	d00f      	beq.n	8001bfe <TIM_OC4_SetConfig+0x4e>
 8001bde:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001be2:	42a8      	cmp	r0, r5
 8001be4:	d00b      	beq.n	8001bfe <TIM_OC4_SetConfig+0x4e>
 8001be6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001bea:	42a8      	cmp	r0, r5
 8001bec:	d007      	beq.n	8001bfe <TIM_OC4_SetConfig+0x4e>
 8001bee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bf2:	42a8      	cmp	r0, r5
 8001bf4:	d003      	beq.n	8001bfe <TIM_OC4_SetConfig+0x4e>
 8001bf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bfa:	42a8      	cmp	r0, r5
 8001bfc:	d104      	bne.n	8001c08 <TIM_OC4_SetConfig+0x58>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001bfe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c00:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c04:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c08:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c0a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c0c:	684a      	ldr	r2, [r1, #4]
 8001c0e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c10:	6203      	str	r3, [r0, #32]
 8001c12:	bd30      	pop	{r4, r5, pc}
 8001c14:	40012c00 	.word	0x40012c00

08001c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c18:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001c1a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c1c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c1e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c22:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001c26:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c28:	6083      	str	r3, [r0, #8]
 8001c2a:	bd10      	pop	{r4, pc}

08001c2c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001c2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c30:	2b01      	cmp	r3, #1
{
 8001c32:	b570      	push	{r4, r5, r6, lr}
 8001c34:	4604      	mov	r4, r0
 8001c36:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001c3a:	d01a      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001c40:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001c42:	2301      	movs	r3, #1
 8001c44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001c48:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c4a:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <HAL_TIM_ConfigClockSource+0x168>)
 8001c4c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001c4e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c50:	680b      	ldr	r3, [r1, #0]
 8001c52:	2b40      	cmp	r3, #64	; 0x40
 8001c54:	d075      	beq.n	8001d42 <HAL_TIM_ConfigClockSource+0x116>
 8001c56:	d818      	bhi.n	8001c8a <HAL_TIM_ConfigClockSource+0x5e>
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	f000 808f 	beq.w	8001d7c <HAL_TIM_ConfigClockSource+0x150>
 8001c5e:	d809      	bhi.n	8001c74 <HAL_TIM_ConfigClockSource+0x48>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8085 	beq.w	8001d70 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001c66:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c6e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	f000 8087 	beq.w	8001d88 <HAL_TIM_ConfigClockSource+0x15c>
 8001c7a:	2b30      	cmp	r3, #48	; 0x30
 8001c7c:	d1f3      	bne.n	8001c66 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001c7e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c84:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001c88:	e033      	b.n	8001cf2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001c8a:	2b70      	cmp	r3, #112	; 0x70
 8001c8c:	d033      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0xca>
 8001c8e:	d81b      	bhi.n	8001cc8 <HAL_TIM_ConfigClockSource+0x9c>
 8001c90:	2b50      	cmp	r3, #80	; 0x50
 8001c92:	d03f      	beq.n	8001d14 <HAL_TIM_ConfigClockSource+0xe8>
 8001c94:	2b60      	cmp	r3, #96	; 0x60
 8001c96:	d1e6      	bne.n	8001c66 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001c98:	684d      	ldr	r5, [r1, #4]
 8001c9a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c9c:	6a01      	ldr	r1, [r0, #32]
 8001c9e:	f021 0110 	bic.w	r1, r1, #16
 8001ca2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ca6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ca8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cb4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001cb8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cba:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001cbc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cc2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001cc6:	e014      	b.n	8001cf2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_TIM_ConfigClockSource+0xbc>
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd2:	d1c8      	bne.n	8001c66 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001cd4:	68cb      	ldr	r3, [r1, #12]
 8001cd6:	684a      	ldr	r2, [r1, #4]
 8001cd8:	6889      	ldr	r1, [r1, #8]
 8001cda:	f7ff ff9d 	bl	8001c18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cde:	6822      	ldr	r2, [r4, #0]
 8001ce0:	6893      	ldr	r3, [r2, #8]
 8001ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce6:	e013      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ce8:	6883      	ldr	r3, [r0, #8]
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001cf2:	6083      	str	r3, [r0, #8]
 8001cf4:	e7b7      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001cf6:	68cb      	ldr	r3, [r1, #12]
 8001cf8:	684a      	ldr	r2, [r1, #4]
 8001cfa:	6889      	ldr	r1, [r1, #8]
 8001cfc:	f7ff ff8c 	bl	8001c18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d10:	6093      	str	r3, [r2, #8]
    break;
 8001d12:	e7a8      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001d14:	684a      	ldr	r2, [r1, #4]
 8001d16:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d18:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d1a:	6a05      	ldr	r5, [r0, #32]
 8001d1c:	f025 0501 	bic.w	r5, r5, #1
 8001d20:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001d22:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d24:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d2c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d30:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001d32:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d34:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001d36:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d3c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001d40:	e7d7      	b.n	8001cf2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001d42:	684a      	ldr	r2, [r1, #4]
 8001d44:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d46:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d48:	6a05      	ldr	r5, [r0, #32]
 8001d4a:	f025 0501 	bic.w	r5, r5, #1
 8001d4e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001d50:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d52:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d5a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d5e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001d60:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d62:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001d64:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d6a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001d6e:	e7c0      	b.n	8001cf2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001d70:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d76:	f043 0307 	orr.w	r3, r3, #7
 8001d7a:	e7ba      	b.n	8001cf2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001d7c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d82:	f043 0317 	orr.w	r3, r3, #23
 8001d86:	e7b4      	b.n	8001cf2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001d88:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d8e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001d92:	e7ae      	b.n	8001cf2 <HAL_TIM_ConfigClockSource+0xc6>
 8001d94:	fffe0088 	.word	0xfffe0088

08001d98 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001d98:	6a03      	ldr	r3, [r0, #32]
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001da0:	6a03      	ldr	r3, [r0, #32]
{
 8001da2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001da4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001da6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001da8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001daa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001db2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001db4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001db6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001dba:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001dbe:	4d0f      	ldr	r5, [pc, #60]	; (8001dfc <TIM_OC5_SetConfig+0x64>)
 8001dc0:	42a8      	cmp	r0, r5
 8001dc2:	d00f      	beq.n	8001de4 <TIM_OC5_SetConfig+0x4c>
 8001dc4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001dc8:	42a8      	cmp	r0, r5
 8001dca:	d00b      	beq.n	8001de4 <TIM_OC5_SetConfig+0x4c>
 8001dcc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001dd0:	42a8      	cmp	r0, r5
 8001dd2:	d007      	beq.n	8001de4 <TIM_OC5_SetConfig+0x4c>
 8001dd4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dd8:	42a8      	cmp	r0, r5
 8001dda:	d003      	beq.n	8001de4 <TIM_OC5_SetConfig+0x4c>
 8001ddc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001de0:	42a8      	cmp	r0, r5
 8001de2:	d104      	bne.n	8001dee <TIM_OC5_SetConfig+0x56>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001de4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001de6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001dea:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dee:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001df0:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001df2:	684a      	ldr	r2, [r1, #4]
 8001df4:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001df6:	6203      	str	r3, [r0, #32]
 8001df8:	bd30      	pop	{r4, r5, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40012c00 	.word	0x40012c00

08001e00 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001e00:	6a03      	ldr	r3, [r0, #32]
 8001e02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e06:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e08:	6a03      	ldr	r3, [r0, #32]
{
 8001e0a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001e0c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001e0e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001e12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001e16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001e1e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001e20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001e24:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e28:	4d0e      	ldr	r5, [pc, #56]	; (8001e64 <TIM_OC6_SetConfig+0x64>)
 8001e2a:	42a8      	cmp	r0, r5
 8001e2c:	d00f      	beq.n	8001e4e <TIM_OC6_SetConfig+0x4e>
 8001e2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001e32:	42a8      	cmp	r0, r5
 8001e34:	d00b      	beq.n	8001e4e <TIM_OC6_SetConfig+0x4e>
 8001e36:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001e3a:	42a8      	cmp	r0, r5
 8001e3c:	d007      	beq.n	8001e4e <TIM_OC6_SetConfig+0x4e>
 8001e3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e42:	42a8      	cmp	r0, r5
 8001e44:	d003      	beq.n	8001e4e <TIM_OC6_SetConfig+0x4e>
 8001e46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e4a:	42a8      	cmp	r0, r5
 8001e4c:	d104      	bne.n	8001e58 <TIM_OC6_SetConfig+0x58>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001e4e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001e50:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001e54:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e58:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001e5a:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001e5c:	684a      	ldr	r2, [r1, #4]
 8001e5e:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001e60:	6203      	str	r3, [r0, #32]
 8001e62:	bd30      	pop	{r4, r5, pc}
 8001e64:	40012c00 	.word	0x40012c00

08001e68 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e68:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001e6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e6e:	2b01      	cmp	r3, #1
{
 8001e70:	4604      	mov	r4, r0
 8001e72:	460d      	mov	r5, r1
 8001e74:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e78:	d010      	beq.n	8001e9c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001e7a:	2301      	movs	r3, #1
  switch (Channel)
 8001e7c:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001e7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001e82:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001e86:	d043      	beq.n	8001f10 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001e88:	d809      	bhi.n	8001e9e <HAL_TIM_PWM_ConfigChannel+0x36>
 8001e8a:	b1fa      	cbz	r2, 8001ecc <HAL_TIM_PWM_ConfigChannel+0x64>
 8001e8c:	2a04      	cmp	r2, #4
 8001e8e:	d02e      	beq.n	8001eee <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e92:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e9c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001e9e:	2a10      	cmp	r2, #16
 8001ea0:	d047      	beq.n	8001f32 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001ea2:	2a14      	cmp	r2, #20
 8001ea4:	d056      	beq.n	8001f54 <HAL_TIM_PWM_ConfigChannel+0xec>
 8001ea6:	2a0c      	cmp	r2, #12
 8001ea8:	d1f2      	bne.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eaa:	6820      	ldr	r0, [r4, #0]
 8001eac:	f7ff fe80 	bl	8001bb0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eb0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001eb2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001eca:	e030      	b.n	8001f2e <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	f7ff fd99 	bl	8001a04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ed2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ed4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	f042 0208 	orr.w	r2, r2, #8
 8001edc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	f022 0204 	bic.w	r2, r2, #4
 8001ee4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eea:	619a      	str	r2, [r3, #24]
    break;
 8001eec:	e7d0      	b.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	f7ff fdd4 	bl	8001a9c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ef4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ef6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f0e:	e7ec      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	f7ff fe09 	bl	8001b28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f16:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001f18:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	f042 0208 	orr.w	r2, r2, #8
 8001f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	f022 0204 	bic.w	r2, r2, #4
 8001f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001f2e:	61da      	str	r2, [r3, #28]
    break;
 8001f30:	e7ae      	b.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	f7ff ff30 	bl	8001d98 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f38:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001f3a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f3e:	f042 0208 	orr.w	r2, r2, #8
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f4e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001f52:	e79d      	b.n	8001e90 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	f7ff ff53 	bl	8001e00 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f5a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001f5c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001f6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f74:	e7ec      	b.n	8001f50 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08001f78 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001f78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f7c:	2b01      	cmp	r3, #1
{
 8001f7e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001f80:	d01c      	beq.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 8001f82:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f84:	4d0e      	ldr	r5, [pc, #56]	; (8001fc0 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8001f86:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001f88:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f8a:	42aa      	cmp	r2, r5
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8001f8e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f92:	42aa      	cmp	r2, r5
 8001f94:	d103      	bne.n	8001f9e <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f96:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f9c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f9e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fa0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fa6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001fa8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001fac:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fae:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001fb0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001fb2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001fb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001fbc:	2002      	movs	r0, #2
} 
 8001fbe:	bd30      	pop	{r4, r5, pc}
 8001fc0:	40012c00 	.word	0x40012c00

08001fc4 <HAL_TIMEx_CommutationCallback>:
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIMEx_BreakCallback>:
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIMEx_Break2Callback>:
{
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_TIM_PeriodElapsedCallback>:


}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim == &htim16){
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001fce:	4283      	cmp	r3, r0
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001fd0:	b510      	push	{r4, lr}
	if(htim == &htim16){
 8001fd2:	d11a      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0x3e>
		jezdzik_time++;
 8001fd4:	4c0e      	ldr	r4, [pc, #56]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001fd6:	8822      	ldrh	r2, [r4, #0]
 8001fd8:	3201      	adds	r2, #1
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	8022      	strh	r2, [r4, #0]
		if(jezdzik_time % 100 == 0){
 8001fde:	8822      	ldrh	r2, [r4, #0]
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	b291      	uxth	r1, r2
 8001fe4:	fbb1 f2f0 	udiv	r2, r1, r0
 8001fe8:	fb00 1212 	mls	r2, r0, r2, r1
 8001fec:	b292      	uxth	r2, r2
 8001fee:	b922      	cbnz	r2, 8001ffa <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_TogglePin(LD10_GPIO_Port,LD10_Pin);
 8001ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ff6:	f7fe fdf6 	bl	8000be6 <HAL_GPIO_TogglePin>
		}
		if(jezdzik_time == 50000){
 8001ffa:	8823      	ldrh	r3, [r4, #0]
 8001ffc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002000:	b29b      	uxth	r3, r3
 8002002:	4293      	cmp	r3, r2
			jezdzik_time = 0;
 8002004:	bf04      	itt	eq
 8002006:	2300      	moveq	r3, #0
 8002008:	8023      	strheq	r3, [r4, #0]
 800200a:	bd10      	pop	{r4, pc}
 800200c:	20000154 	.word	0x20000154
 8002010:	20000020 	.word	0x20000020
 8002014:	48001000 	.word	0x48001000

08002018 <non_blocking_delay>:

	}
}

void non_blocking_delay(uint16_t wait_time){
	while(((jezdzik_time % wait_time) != 0) && (jezdzik_time != 0)){
 8002018:	4908      	ldr	r1, [pc, #32]	; (800203c <non_blocking_delay+0x24>)
 800201a:	880b      	ldrh	r3, [r1, #0]
 800201c:	b29a      	uxth	r2, r3
 800201e:	fbb2 f3f0 	udiv	r3, r2, r0
 8002022:	fb00 2313 	mls	r3, r0, r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	b11b      	cbz	r3, 8002032 <non_blocking_delay+0x1a>
 800202a:	880b      	ldrh	r3, [r1, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f3      	bne.n	800201a <non_blocking_delay+0x2>
	}
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002036:	4802      	ldr	r0, [pc, #8]	; (8002040 <non_blocking_delay+0x28>)
 8002038:	f7fe bdd5 	b.w	8000be6 <HAL_GPIO_TogglePin>
 800203c:	20000020 	.word	0x20000020
 8002040:	48001000 	.word	0x48001000

08002044 <loop>:
	non_blocking_delay(200);
 8002044:	20c8      	movs	r0, #200	; 0xc8
 8002046:	f7ff bfe7 	b.w	8002018 <non_blocking_delay>
	...

0800204c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800204c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002084 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002050:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002052:	e003      	b.n	800205c <LoopCopyDataInit>

08002054 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002056:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002058:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800205a:	3104      	adds	r1, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800205c:	480b      	ldr	r0, [pc, #44]	; (800208c <LoopForever+0xa>)
	ldr	r3, =_edata
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002060:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002062:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002064:	d3f6      	bcc.n	8002054 <CopyDataInit>
	ldr	r2, =_sbss
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002068:	e002      	b.n	8002070 <LoopFillZerobss>

0800206a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800206a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800206c:	f842 3b04 	str.w	r3, [r2], #4

08002070 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <LoopForever+0x16>)
	cmp	r2, r3
 8002072:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002074:	d3f9      	bcc.n	800206a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002076:	f7fe fa7d 	bl	8000574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207a:	f000 f811 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800207e:	f7fe f9ad 	bl	80003dc <main>

08002082 <LoopForever>:

LoopForever:
    b LoopForever
 8002082:	e7fe      	b.n	8002082 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002084:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002088:	08002180 	.word	0x08002180
	ldr	r0, =_sdata
 800208c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002090:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002094:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002098:	20000540 	.word	0x20000540

0800209c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_2_IRQHandler>
	...

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	4e0d      	ldr	r6, [pc, #52]	; (80020d8 <__libc_init_array+0x38>)
 80020a4:	4c0d      	ldr	r4, [pc, #52]	; (80020dc <__libc_init_array+0x3c>)
 80020a6:	1ba4      	subs	r4, r4, r6
 80020a8:	10a4      	asrs	r4, r4, #2
 80020aa:	2500      	movs	r5, #0
 80020ac:	42a5      	cmp	r5, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	4e0b      	ldr	r6, [pc, #44]	; (80020e0 <__libc_init_array+0x40>)
 80020b2:	4c0c      	ldr	r4, [pc, #48]	; (80020e4 <__libc_init_array+0x44>)
 80020b4:	f000 f818 	bl	80020e8 <_init>
 80020b8:	1ba4      	subs	r4, r4, r6
 80020ba:	10a4      	asrs	r4, r4, #2
 80020bc:	2500      	movs	r5, #0
 80020be:	42a5      	cmp	r5, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020c8:	4798      	blx	r3
 80020ca:	3501      	adds	r5, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d2:	4798      	blx	r3
 80020d4:	3501      	adds	r5, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	08002178 	.word	0x08002178
 80020dc:	08002178 	.word	0x08002178
 80020e0:	08002178 	.word	0x08002178
 80020e4:	0800217c 	.word	0x0800217c

080020e8 <_init>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	bf00      	nop
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr

080020f4 <_fini>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr
